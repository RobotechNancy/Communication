
L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002888  08002888  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002888  08002888  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002888  08002888  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002888  08002888  00012888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08002900  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002900  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007837  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001836  00000000  00000000  000278d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  00029110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  00029898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020127  00000000  00000000  00029f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000078e6  00000000  00000000  0004a07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdd75  00000000  00000000  00051965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f6da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d54  00000000  00000000  0010f72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800282c 	.word	0x0800282c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	0800282c 	.word	0x0800282c

080001cc <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \param isRep vrai si c'est une reponse a une requete, faux sinon
 * \param RepId indique le nombre de reponse atendu pour une requete et le num de la reponse pour une reponse
 * \param dataLen frame payload length in byte (0 .. 8) aka data length code
 * \param data CAN frame payload (up to 8 byte)
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80001cc:	b5b0      	push	{r4, r5, r7, lr}
 80001ce:	b098      	sub	sp, #96	; 0x60
 80001d0:	af06      	add	r7, sp, #24
 80001d2:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80001d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80001d8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80001dc:	2100      	movs	r1, #0
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 fe89 	bl	8000ef6 <HAL_CAN_GetRxMessage>

	uint8_t data[1];
	can_mess_t msg = process_frame(RxHeader, RxData);
 80001e4:	f107 0508 	add.w	r5, r7, #8
 80001e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80001ec:	9304      	str	r3, [sp, #16]
 80001ee:	466c      	mov	r4, sp
 80001f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80001fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000200:	4628      	mov	r0, r5
 8000202:	f000 f8d1 	bl	80003a8 <process_frame>

	switch(msg.fct_code) {
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 800020c:	d003      	beq.n	8000216 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 800020e:	f5b3 2f7f 	cmp.w	r3, #1044480	; 0xff000
 8000212:	d01e      	beq.n	8000252 <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
	case FCT_ACCUSER_RECPETION:
		data[0] = 0;
		send(CAN_ADDR_RASPBERRY, FCT_ACCUSER_RECPETION, data, 1, true, 1, msg.message_id);
	break;
	default:
	break;
 8000214:	e030      	b.n	8000278 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
		state.len = msg.data_len;
 8000216:	7dfa      	ldrb	r2, [r7, #23]
 8000218:	4b19      	ldr	r3, [pc, #100]	; (8000280 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800021a:	711a      	strb	r2, [r3, #4]
		memcpy(state.data, msg.data, msg.data_len);
 800021c:	4b18      	ldr	r3, [pc, #96]	; (8000280 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800021e:	6818      	ldr	r0, [r3, #0]
 8000220:	7dfb      	ldrb	r3, [r7, #23]
 8000222:	461a      	mov	r2, r3
 8000224:	f107 0308 	add.w	r3, r7, #8
 8000228:	3310      	adds	r3, #16
 800022a:	4619      	mov	r1, r3
 800022c:	f002 fae8 	bl	8002800 <memcpy>
		send(CAN_ADDR_RASPBERRY, FCT_CHANGEMENT_ETAT, msg.data, msg.data_len, false, 0, msg.message_id);
 8000230:	7df9      	ldrb	r1, [r7, #23]
 8000232:	7d3b      	ldrb	r3, [r7, #20]
 8000234:	f107 0208 	add.w	r2, r7, #8
 8000238:	3210      	adds	r2, #16
 800023a:	9302      	str	r3, [sp, #8]
 800023c:	2300      	movs	r3, #0
 800023e:	9301      	str	r3, [sp, #4]
 8000240:	2300      	movs	r3, #0
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	460b      	mov	r3, r1
 8000246:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800024a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800024e:	f000 f85d 	bl	800030c <send>
		data[0] = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	f887 3020 	strb.w	r3, [r7, #32]
		send(CAN_ADDR_RASPBERRY, FCT_ACCUSER_RECPETION, data, 1, true, 1, msg.message_id);
 8000258:	7d3b      	ldrb	r3, [r7, #20]
 800025a:	f107 0220 	add.w	r2, r7, #32
 800025e:	9302      	str	r3, [sp, #8]
 8000260:	2301      	movs	r3, #1
 8000262:	9301      	str	r3, [sp, #4]
 8000264:	2301      	movs	r3, #1
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	2301      	movs	r3, #1
 800026a:	f44f 217f 	mov.w	r1, #1044480	; 0xff000
 800026e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000272:	f000 f84b 	bl	800030c <send>
	break;
 8000276:	bf00      	nop
	}
}
 8000278:	bf00      	nop
 800027a:	3748      	adds	r7, #72	; 0x48
 800027c:	46bd      	mov	sp, r7
 800027e:	bdb0      	pop	{r4, r5, r7, pc}
 8000280:	200000dc 	.word	0x200000dc

08000284 <configure_CAN>:


void configure_CAN(CAN_HandleTypeDef hcan, CAN_EMIT_ADDR addr) {
 8000284:	b084      	sub	sp, #16
 8000286:	b5b0      	push	{r4, r5, r7, lr}
 8000288:	b08a      	sub	sp, #40	; 0x28
 800028a:	af00      	add	r7, sp, #0
 800028c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterMode =           CAN_FILTERMODE_IDMASK; // Filtrage par liste ou par masque
 8000294:	2300      	movs	r3, #0
 8000296:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale =          CAN_FILTERSCALE_16BIT; // Filtre de 32 bits ou 1 de 16 bits
 8000298:	2300      	movs	r3, #0
 800029a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;          // 3 files avec 3 filtres par file
 800029c:	2300      	movs	r3, #0
 800029e:	613b      	str	r3, [r7, #16]
	sFilterConfig.SlaveStartFilterBank = 14;                    // Choix du filtre dans la banque
 80002a0:	230e      	movs	r3, #14
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterActivation =     ENABLE;
 80002a4:	2301      	movs	r3, #1
 80002a6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterMaskIdLow =      0b111100000000000;     // Masque LSBs
 80002a8:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80002ac:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh =     0b111100000000000;     // Masque MSBs
 80002ae:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80002b2:	60bb      	str	r3, [r7, #8]

	sFilterConfig.FilterBank =           0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh =         addr >> 9;             // Adresse de l'émetteur
 80002b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80002ba:	0a5b      	lsrs	r3, r3, #9
 80002bc:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow =          0b111100000000000;     // Adresse de broadcast 0x200000
 80002be:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80002c2:	607b      	str	r3, [r7, #4]

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80002c4:	463b      	mov	r3, r7
 80002c6:	4619      	mov	r1, r3
 80002c8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80002cc:	f000 fc35 	bl	8000b3a <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan); // Démarrer le périphérique CAN
 80002d0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80002d4:	f000 fcfb 	bl	8000cce <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Activer le mode interruption
 80002d8:	2102      	movs	r1, #2
 80002da:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80002de:	f000 ff1c 	bl	800111a <HAL_CAN_ActivateNotification>

	hcan_p = hcan;
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <configure_CAN+0x84>)
 80002e4:	461d      	mov	r5, r3
 80002e6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80002ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80002f6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80002fa:	bf00      	nop
 80002fc:	3728      	adds	r7, #40	; 0x28
 80002fe:	46bd      	mov	sp, r7
 8000300:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr
 8000308:	200000b4 	.word	0x200000b4

0800030c <send>:


int send(CAN_ADDR addr, CAN_FCT_CODE fct_code, uint8_t data[], uint8_t data_len, bool is_rep, uint8_t rep_len, uint8_t msg_id){
 800030c:	b580      	push	{r7, lr}
 800030e:	b08c      	sub	sp, #48	; 0x30
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
 8000318:	70fb      	strb	r3, [r7, #3]
	if (data_len > 8)
 800031a:	78fb      	ldrb	r3, [r7, #3]
 800031c:	2b08      	cmp	r3, #8
 800031e:	d901      	bls.n	8000324 <send+0x18>
		return CAN_E_DATA_SIZE_TOO_LONG;
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <send+0x90>)
 8000322:	e037      	b.n	8000394 <send+0x88>

	if (addr > CAN_MAX_VALUE_ADDR) return CAN_E_OOB_ADDR;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	2b10      	cmp	r3, #16
 8000328:	d902      	bls.n	8000330 <send+0x24>
 800032a:	f46f 73ff 	mvn.w	r3, #510	; 0x1fe
 800032e:	e031      	b.n	8000394 <send+0x88>
	if (fct_code > CAN_MAX_VALUE_CODE_FCT) return CAN_E_OOB_CODE_FCT;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	2b80      	cmp	r3, #128	; 0x80
 8000334:	d901      	bls.n	800033a <send+0x2e>
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <send+0x94>)
 8000338:	e02c      	b.n	8000394 <send+0x88>
	if(rep_len < 0 || rep_len > CAN_MAX_VALUE_REP_NBR) return CAN_E_OOB_REP_NBR;
 800033a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800033e:	2b08      	cmp	r3, #8
 8000340:	d902      	bls.n	8000348 <send+0x3c>
 8000342:	f46f 7300 	mvn.w	r3, #512	; 0x200
 8000346:	e025      	b.n	8000394 <send+0x88>

	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = data_len;
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.ExtId = addr | CAN_ADDR_BASE_ROULANTE_E | fct_code | rep_len | msg_id << CAN_DECALAGE_ID_MSG | is_rep << CAN_DECALAGE_IS_REP | rep_len;
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	431a      	orrs	r2, r3
 8000352:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000356:	4313      	orrs	r3, r2
 8000358:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800035c:	0112      	lsls	r2, r2, #4
 800035e:	4313      	orrs	r3, r2
 8000360:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000364:	00d2      	lsls	r2, r2, #3
 8000366:	431a      	orrs	r2, r3
 8000368:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800036c:	4313      	orrs	r3, r2
 800036e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000372:	61fb      	str	r3, [r7, #28]
	txHeader.IDE = CAN_ID_EXT;
 8000374:	2304      	movs	r3, #4
 8000376:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 8000378:	2300      	movs	r3, #0
 800037a:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.TransmitGlobalTime = DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint32_t TxMailbox;
	HAL_CAN_AddTxMessage(&hcan_p, &txHeader, data, &TxMailbox);
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	f107 0118 	add.w	r1, r7, #24
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	4805      	ldr	r0, [pc, #20]	; (80003a4 <send+0x98>)
 800038e:	f000 fce2 	bl	8000d56 <HAL_CAN_AddTxMessage>

	return 0;
 8000392:	2300      	movs	r3, #0
}
 8000394:	4618      	mov	r0, r3
 8000396:	3730      	adds	r7, #48	; 0x30
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	fffffe02 	.word	0xfffffe02
 80003a0:	fffffe00 	.word	0xfffffe00
 80003a4:	200000b4 	.word	0x200000b4

080003a8 <process_frame>:


can_mess_t process_frame(CAN_RxHeaderTypeDef frame, uint8_t data[]){
 80003a8:	b084      	sub	sp, #16
 80003aa:	b5b0      	push	{r4, r5, r7, lr}
 80003ac:	b08a      	sub	sp, #40	; 0x28
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80003b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	can_mess_t rep;

	rep.recv_addr = (frame.ExtId & CAN_FILTER_ADDR_EMETTEUR);
 80003ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003bc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80003c0:	60fb      	str	r3, [r7, #12]
	rep.emit_addr = (frame.ExtId &  CAN_FILTER_ADDR_RECEPTEUR);
 80003c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80003c8:	613b      	str	r3, [r7, #16]
	rep.fct_code = (frame.ExtId & CAN_FILTER_CODE_FCT);
 80003ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003cc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80003d0:	617b      	str	r3, [r7, #20]
	rep.is_rep = (frame.ExtId & CAN_FILTER_IS_REP) >> CAN_DECALAGE_IS_REP;
 80003d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003d4:	08db      	lsrs	r3, r3, #3
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	bf14      	ite	ne
 80003de:	2301      	movne	r3, #1
 80003e0:	2300      	moveq	r3, #0
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	767b      	strb	r3, [r7, #25]
	rep.rep_id = (frame.ExtId & CAN_FILTER_REP_NBR) ;
 80003e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	f003 0307 	and.w	r3, r3, #7
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	76bb      	strb	r3, [r7, #26]
	rep.message_id = (frame.ExtId & CAN_FILTER_IDE_MSG) >> CAN_DECALAGE_ID_MSG;
 80003f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003f4:	091b      	lsrs	r3, r3, #4
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	763b      	strb	r3, [r7, #24]

	if(rep.recv_addr < 0 || rep.recv_addr > CAN_MAX_VALUE_ADDR) exit(CAN_E_OOB_ADDR);
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	2b10      	cmp	r3, #16
 80003fe:	d903      	bls.n	8000408 <process_frame+0x60>
 8000400:	f46f 70ff 	mvn.w	r0, #510	; 0x1fe
 8000404:	f002 f9c4 	bl	8002790 <exit>
	if(rep.fct_code < 0 || rep.fct_code > CAN_MAX_VALUE_CODE_FCT) exit(CAN_E_OOB_CODE_FCT);
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	2b80      	cmp	r3, #128	; 0x80
 800040c:	d902      	bls.n	8000414 <process_frame+0x6c>
 800040e:	481c      	ldr	r0, [pc, #112]	; (8000480 <process_frame+0xd8>)
 8000410:	f002 f9be 	bl	8002790 <exit>
	if(rep.rep_id < 0 || rep.rep_id > CAN_MAX_VALUE_REP_NBR) exit(CAN_E_OOB_REP_NBR);
 8000414:	7ebb      	ldrb	r3, [r7, #26]
 8000416:	2b08      	cmp	r3, #8
 8000418:	d903      	bls.n	8000422 <process_frame+0x7a>
 800041a:	f46f 7000 	mvn.w	r0, #512	; 0x200
 800041e:	f002 f9b7 	bl	8002790 <exit>
	if (frame.DLC > 8) exit(CAN_E_DATA_SIZE_TOO_LONG);
 8000422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000424:	2b08      	cmp	r3, #8
 8000426:	d902      	bls.n	800042e <process_frame+0x86>
 8000428:	4816      	ldr	r0, [pc, #88]	; (8000484 <format_frame+0xdc>)
 800042a:	f002 f9b1 	bl	8002790 <exit>

	rep.data_len = frame.DLC;
 800042e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000430:	b2db      	uxtb	r3, r3
 8000432:	76fb      	strb	r3, [r7, #27]

	for (int i = 0; i < frame.DLC; i++){
 8000434:	2300      	movs	r3, #0
 8000436:	627b      	str	r3, [r7, #36]	; 0x24
 8000438:	e00c      	b.n	8000454 <process_frame+0xac>
		/*if(data[i] <0 || data[i] > 255)
			return CAN_E_OOB_DATA;*/

		rep.data[i] = data[i];
 800043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800043c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800043e:	4413      	add	r3, r2
 8000440:	7819      	ldrb	r1, [r3, #0]
 8000442:	f107 021c 	add.w	r2, r7, #28
 8000446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000448:	4413      	add	r3, r2
 800044a:	460a      	mov	r2, r1
 800044c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < frame.DLC; i++){
 800044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000450:	3301      	adds	r3, #1
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
 8000454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000458:	429a      	cmp	r2, r3
 800045a:	d8ee      	bhi.n	800043a <process_frame+0x92>
	}

    return rep;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	461d      	mov	r5, r3
 8000460:	f107 040c 	add.w	r4, r7, #12
 8000464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000468:	e894 0003 	ldmia.w	r4, {r0, r1}
 800046c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	3728      	adds	r7, #40	; 0x28
 8000474:	46bd      	mov	sp, r7
 8000476:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800047a:	b004      	add	sp, #16
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	fffffe00 	.word	0xfffffe00
 8000484:	fffffe02 	.word	0xfffffe02

08000488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048a:	b089      	sub	sp, #36	; 0x24
 800048c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048e:	f000 f9e4 	bl	800085a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000492:	f000 f819 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f893 	bl	80005c0 <MX_GPIO_Init>
  MX_CAN1_Init();
 800049a:	f000 f85b 	bl	8000554 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  configure_CAN(hcan1, CAN_ADDR_BASE_ROULANTE_E);
 800049e:	4e09      	ldr	r6, [pc, #36]	; (80004c4 <main+0x3c>)
 80004a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80004a4:	9306      	str	r3, [sp, #24]
 80004a6:	466d      	mov	r5, sp
 80004a8:	f106 0410 	add.w	r4, r6, #16
 80004ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80004b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80004b8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004bc:	f7ff fee2 	bl	8000284 <configure_CAN>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80004c0:	e7fe      	b.n	80004c0 <main+0x38>
 80004c2:	bf00      	nop
 80004c4:	2000008c 	.word	0x2000008c

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b096      	sub	sp, #88	; 0x58
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2244      	movs	r2, #68	; 0x44
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 f9a0 	bl	800281c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	463b      	mov	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004ee:	f001 faf3 	bl	8001ad8 <HAL_PWREx_ControlVoltageScaling>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004f8:	f000 f87a 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004fc:	2310      	movs	r3, #16
 80004fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000500:	2301      	movs	r3, #1
 8000502:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000508:	2360      	movs	r3, #96	; 0x60
 800050a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800050c:	2300      	movs	r3, #0
 800050e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	4618      	mov	r0, r3
 8000516:	f001 fb35 	bl	8001b84 <HAL_RCC_OscConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000520:	f000 f866 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000524:	230f      	movs	r3, #15
 8000526:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f001 ff35 	bl	80023ac <HAL_RCC_ClockConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000548:	f000 f852 	bl	80005f0 <Error_Handler>
  }
}
 800054c:	bf00      	nop
 800054e:	3758      	adds	r7, #88	; 0x58
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <MX_CAN1_Init+0x64>)
 800055a:	4a18      	ldr	r2, [pc, #96]	; (80005bc <MX_CAN1_Init+0x68>)
 800055c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_CAN1_Init+0x64>)
 8000560:	2210      	movs	r2, #16
 8000562:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_CAN1_Init+0x64>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <MX_CAN1_Init+0x64>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_CAN1_Init+0x64>)
 8000572:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000576:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_CAN1_Init+0x64>)
 800057a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800057e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <MX_CAN1_Init+0x64>)
 8000582:	2200      	movs	r2, #0
 8000584:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_CAN1_Init+0x64>)
 8000588:	2200      	movs	r2, #0
 800058a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <MX_CAN1_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_CAN1_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <MX_CAN1_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_CAN1_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <MX_CAN1_Init+0x64>)
 80005a6:	f000 f9cd 	bl	8000944 <HAL_CAN_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005b0:	f000 f81e 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2000008c 	.word	0x2000008c
 80005bc:	40006400 	.word	0x40006400

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_GPIO_Init+0x2c>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <MX_GPIO_Init+0x2c>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_GPIO_Init+0x2c>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_MspInit+0x44>)
 8000604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_MspInit+0x44>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6613      	str	r3, [r2, #96]	; 0x60
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_MspInit+0x44>)
 8000610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_MspInit+0x44>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_MspInit+0x44>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	6593      	str	r3, [r2, #88]	; 0x58
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_MspInit+0x44>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a28      	ldr	r2, [pc, #160]	; (8000704 <HAL_CAN_MspInit+0xc0>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d149      	bne.n	80006fa <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <HAL_CAN_MspInit+0xc4>)
 8000668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066a:	4a27      	ldr	r2, [pc, #156]	; (8000708 <HAL_CAN_MspInit+0xc4>)
 800066c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000670:	6593      	str	r3, [r2, #88]	; 0x58
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <HAL_CAN_MspInit+0xc4>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <HAL_CAN_MspInit+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a21      	ldr	r2, [pc, #132]	; (8000708 <HAL_CAN_MspInit+0xc4>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <HAL_CAN_MspInit+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000696:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800069a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006a8:	2309      	movs	r3, #9
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b6:	f001 f897 	bl	80017e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2013      	movs	r0, #19
 80006c0:	f001 f85b 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80006c4:	2013      	movs	r0, #19
 80006c6:	f001 f874 	bl	80017b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2014      	movs	r0, #20
 80006d0:	f001 f853 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006d4:	2014      	movs	r0, #20
 80006d6:	f001 f86c 	bl	80017b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2015      	movs	r0, #21
 80006e0:	f001 f84b 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006e4:	2015      	movs	r0, #21
 80006e6:	f001 f864 	bl	80017b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2016      	movs	r0, #22
 80006f0:	f001 f843 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80006f4:	2016      	movs	r0, #22
 80006f6:	f001 f85c 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	; 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40006400 	.word	0x40006400
 8000708:	40021000 	.word	0x40021000

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <MemManage_Handler+0x4>

0800071e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <UsageFault_Handler+0x4>

0800072a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000758:	f000 f8d4 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <CAN1_TX_IRQHandler+0x10>)
 8000766:	f000 fcfe 	bl	8001166 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000008c 	.word	0x2000008c

08000774 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <CAN1_RX0_IRQHandler+0x10>)
 800077a:	f000 fcf4 	bl	8001166 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000008c 	.word	0x2000008c

08000788 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <CAN1_RX1_IRQHandler+0x10>)
 800078e:	f000 fcea 	bl	8001166 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2000008c 	.word	0x2000008c

0800079c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <CAN1_SCE_IRQHandler+0x10>)
 80007a2:	f000 fce0 	bl	8001166 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000008c 	.word	0x2000008c

080007b0 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007ba:	f001 ffe3 	bl	8002784 <__errno>
 80007be:	4603      	mov	r3, r0
 80007c0:	2216      	movs	r2, #22
 80007c2:	601a      	str	r2, [r3, #0]
	return -1;
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_exit>:

void _exit (int status)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ffe7 	bl	80007b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80007e2:	e7fe      	b.n	80007e2 <_exit+0x12>

080007e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <SystemInit+0x20>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <SystemInit+0x20>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000840 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800080c:	f7ff ffea 	bl	80007e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <LoopForever+0x6>)
  ldr r1, =_edata
 8000812:	490d      	ldr	r1, [pc, #52]	; (8000848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <LoopForever+0xe>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000828:	4c0a      	ldr	r4, [pc, #40]	; (8000854 <LoopForever+0x16>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000836:	f001 ffbf 	bl	80027b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800083a:	f7ff fe25 	bl	8000488 <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000840:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800084c:	08002890 	.word	0x08002890
  ldr r2, =_sbss
 8000850:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000854:	200000e8 	.word	0x200000e8

08000858 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_IRQHandler>

0800085a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000860:	2300      	movs	r3, #0
 8000862:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 ff7d 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800086a:	200f      	movs	r0, #15
 800086c:	f000 f80e 	bl	800088c <HAL_InitTick>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	e001      	b.n	8000880 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800087c:	f7ff febe 	bl	80005fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000880:	79fb      	ldrb	r3, [r7, #7]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <HAL_InitTick+0x6c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d023      	beq.n	80008e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_InitTick+0x70>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_InitTick+0x6c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 ff89 	bl	80017ce <HAL_SYSTICK_Config>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10f      	bne.n	80008e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d809      	bhi.n	80008dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008d0:	f000 ff53 	bl	800177a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d4:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <HAL_InitTick+0x74>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	e007      	b.n	80008ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e004      	b.n	80008ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	73fb      	strb	r3, [r7, #15]
 80008e6:	e001      	b.n	80008ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	200000e4 	.word	0x200000e4

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	200000e4 	.word	0x200000e4

08000944 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d101      	bne.n	8000956 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e0ed      	b.n	8000b32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d102      	bne.n	8000968 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fe6e 	bl	8000644 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f042 0201 	orr.w	r2, r2, #1
 8000976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000978:	f7ff ffd8 	bl	800092c <HAL_GetTick>
 800097c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800097e:	e012      	b.n	80009a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000980:	f7ff ffd4 	bl	800092c <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	2b0a      	cmp	r3, #10
 800098c:	d90b      	bls.n	80009a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2205      	movs	r2, #5
 800099e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e0c5      	b.n	8000b32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d0e5      	beq.n	8000980 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f022 0202 	bic.w	r2, r2, #2
 80009c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009c4:	f7ff ffb2 	bl	800092c <HAL_GetTick>
 80009c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009ca:	e012      	b.n	80009f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009cc:	f7ff ffae 	bl	800092c <HAL_GetTick>
 80009d0:	4602      	mov	r2, r0
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2b0a      	cmp	r3, #10
 80009d8:	d90b      	bls.n	80009f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2205      	movs	r2, #5
 80009ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e09f      	b.n	8000b32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1e5      	bne.n	80009cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	7e1b      	ldrb	r3, [r3, #24]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d108      	bne.n	8000a1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	e007      	b.n	8000a2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7e5b      	ldrb	r3, [r3, #25]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d108      	bne.n	8000a44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	e007      	b.n	8000a54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	7e9b      	ldrb	r3, [r3, #26]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d108      	bne.n	8000a6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f042 0220 	orr.w	r2, r2, #32
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	e007      	b.n	8000a7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 0220 	bic.w	r2, r2, #32
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7edb      	ldrb	r3, [r3, #27]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d108      	bne.n	8000a98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f022 0210 	bic.w	r2, r2, #16
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	e007      	b.n	8000aa8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 0210 	orr.w	r2, r2, #16
 8000aa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7f1b      	ldrb	r3, [r3, #28]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d108      	bne.n	8000ac2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f042 0208 	orr.w	r2, r2, #8
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e007      	b.n	8000ad2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f022 0208 	bic.w	r2, r2, #8
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7f5b      	ldrb	r3, [r3, #29]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d108      	bne.n	8000aec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f042 0204 	orr.w	r2, r2, #4
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	e007      	b.n	8000afc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f022 0204 	bic.w	r2, r2, #4
 8000afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	431a      	orrs	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	ea42 0103 	orr.w	r1, r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	1e5a      	subs	r2, r3, #1
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b087      	sub	sp, #28
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b50:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b52:	7cfb      	ldrb	r3, [r7, #19]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d003      	beq.n	8000b60 <HAL_CAN_ConfigFilter+0x26>
 8000b58:	7cfb      	ldrb	r3, [r7, #19]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	f040 80aa 	bne.w	8000cb4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b66:	f043 0201 	orr.w	r2, r3, #1
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	f003 031f 	and.w	r3, r3, #31
 8000b78:	2201      	movs	r2, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d123      	bne.n	8000be2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bbc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	3248      	adds	r2, #72	; 0x48
 8000bc2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bd6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bd8:	6979      	ldr	r1, [r7, #20]
 8000bda:	3348      	adds	r3, #72	; 0x48
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	440b      	add	r3, r1
 8000be0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d122      	bne.n	8000c30 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c0a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3248      	adds	r2, #72	; 0x48
 8000c10:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c24:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c26:	6979      	ldr	r1, [r7, #20]
 8000c28:	3348      	adds	r3, #72	; 0x48
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	440b      	add	r3, r1
 8000c2e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d109      	bne.n	8000c4c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c4a:	e007      	b.n	8000c5c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	431a      	orrs	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d109      	bne.n	8000c78 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c76:	e007      	b.n	8000c88 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d107      	bne.n	8000ca0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ca6:	f023 0201 	bic.w	r2, r3, #1
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e006      	b.n	8000cc2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
  }
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	371c      	adds	r7, #28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d12e      	bne.n	8000d40 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0201 	bic.w	r2, r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000cfa:	f7ff fe17 	bl	800092c <HAL_GetTick>
 8000cfe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d00:	e012      	b.n	8000d28 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d02:	f7ff fe13 	bl	800092c <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b0a      	cmp	r3, #10
 8000d0e:	d90b      	bls.n	8000d28 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2205      	movs	r2, #5
 8000d20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e012      	b.n	8000d4e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1e5      	bne.n	8000d02 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e006      	b.n	8000d4e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
  }
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b089      	sub	sp, #36	; 0x24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d74:	7ffb      	ldrb	r3, [r7, #31]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d003      	beq.n	8000d82 <HAL_CAN_AddTxMessage+0x2c>
 8000d7a:	7ffb      	ldrb	r3, [r7, #31]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	f040 80ad 	bne.w	8000edc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10a      	bne.n	8000da2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d105      	bne.n	8000da2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f000 8095 	beq.w	8000ecc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	0e1b      	lsrs	r3, r3, #24
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000dac:	2201      	movs	r2, #1
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	409a      	lsls	r2, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10d      	bne.n	8000dda <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dc8:	68f9      	ldr	r1, [r7, #12]
 8000dca:	6809      	ldr	r1, [r1, #0]
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3318      	adds	r3, #24
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	440b      	add	r3, r1
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e00f      	b.n	8000dfa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000de4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dea:	68f9      	ldr	r1, [r7, #12]
 8000dec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000dee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3318      	adds	r3, #24
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	440b      	add	r3, r1
 8000df8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6819      	ldr	r1, [r3, #0]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3318      	adds	r3, #24
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	440b      	add	r3, r1
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	7d1b      	ldrb	r3, [r3, #20]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d111      	bne.n	8000e3a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3318      	adds	r3, #24
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	4413      	add	r3, r2
 8000e22:	3304      	adds	r3, #4
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	6811      	ldr	r1, [r2, #0]
 8000e2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3318      	adds	r3, #24
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	440b      	add	r3, r1
 8000e36:	3304      	adds	r3, #4
 8000e38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3307      	adds	r3, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	061a      	lsls	r2, r3, #24
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3306      	adds	r3, #6
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	041b      	lsls	r3, r3, #16
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3305      	adds	r3, #5
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	4313      	orrs	r3, r2
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	3204      	adds	r2, #4
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	6811      	ldr	r1, [r2, #0]
 8000e62:	ea43 0200 	orr.w	r2, r3, r0
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000e70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3303      	adds	r3, #3
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	061a      	lsls	r2, r3, #24
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	041b      	lsls	r3, r3, #16
 8000e82:	431a      	orrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3301      	adds	r3, #1
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	4610      	mov	r0, r2
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	6811      	ldr	r1, [r2, #0]
 8000e98:	ea43 0200 	orr.w	r2, r3, r0
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	440b      	add	r3, r1
 8000ea2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000ea6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	3318      	adds	r3, #24
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	4413      	add	r3, r2
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	6811      	ldr	r1, [r2, #0]
 8000eba:	f043 0201 	orr.w	r2, r3, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3318      	adds	r3, #24
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	440b      	add	r3, r1
 8000ec6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e00e      	b.n	8000eea <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e006      	b.n	8000eea <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
  }
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b087      	sub	sp, #28
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f0a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d003      	beq.n	8000f1a <HAL_CAN_GetRxMessage+0x24>
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	f040 80f3 	bne.w	8001100 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10e      	bne.n	8000f3e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d116      	bne.n	8000f5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0e7      	b.n	800110e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d107      	bne.n	8000f5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e0d8      	b.n	800110e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	331b      	adds	r3, #27
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	4413      	add	r3, r2
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0204 	and.w	r2, r3, #4
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10c      	bne.n	8000f94 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	331b      	adds	r3, #27
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	4413      	add	r3, r2
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	0d5b      	lsrs	r3, r3, #21
 8000f8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e00b      	b.n	8000fac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	331b      	adds	r3, #27
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	4413      	add	r3, r2
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	331b      	adds	r3, #27
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	4413      	add	r3, r2
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0202 	and.w	r2, r3, #2
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	331b      	adds	r3, #27
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	4413      	add	r3, r2
 8000fce:	3304      	adds	r3, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 020f 	and.w	r2, r3, #15
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	331b      	adds	r3, #27
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	331b      	adds	r3, #27
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	4413      	add	r3, r2
 8000ffe:	3304      	adds	r3, #4
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	0c1b      	lsrs	r3, r3, #16
 8001004:	b29a      	uxth	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4413      	add	r3, r2
 8001014:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	4413      	add	r3, r2
 800102a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0a1a      	lsrs	r2, r3, #8
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	4413      	add	r3, r2
 8001044:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	0c1a      	lsrs	r2, r3, #16
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	3302      	adds	r3, #2
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4413      	add	r3, r2
 800105e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	0e1a      	lsrs	r2, r3, #24
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3303      	adds	r3, #3
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4413      	add	r3, r2
 8001078:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	3304      	adds	r3, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	4413      	add	r3, r2
 8001090:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	0a1a      	lsrs	r2, r3, #8
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	3305      	adds	r3, #5
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	4413      	add	r3, r2
 80010aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0c1a      	lsrs	r2, r3, #16
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	3306      	adds	r3, #6
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	4413      	add	r3, r2
 80010c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0e1a      	lsrs	r2, r3, #24
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	3307      	adds	r3, #7
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d108      	bne.n	80010ec <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 0220 	orr.w	r2, r2, #32
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	e007      	b.n	80010fc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0220 	orr.w	r2, r2, #32
 80010fa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e006      	b.n	800110e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
  }
}
 800110e:	4618      	mov	r0, r3
 8001110:	371c      	adds	r7, #28
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800111a:	b480      	push	{r7}
 800111c:	b085      	sub	sp, #20
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800112a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d002      	beq.n	8001138 <HAL_CAN_ActivateNotification+0x1e>
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d109      	bne.n	800114c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6959      	ldr	r1, [r3, #20]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	e006      	b.n	800115a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
  }
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b08a      	sub	sp, #40	; 0x28
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d07c      	beq.n	80012a6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d023      	beq.n	80011fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2201      	movs	r2, #1
 80011bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f983 	bl	80014d4 <HAL_CAN_TxMailbox0CompleteCallback>
 80011ce:	e016      	b.n	80011fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d004      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
 80011e2:	e00c      	b.n	80011fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
 80011f6:	e002      	b.n	80011fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f989 	bl	8001510 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001204:	2b00      	cmp	r3, #0
 8001206:	d024      	beq.n	8001252 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001210:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f963 	bl	80014e8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001222:	e016      	b.n	8001252 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
 8001236:	e00c      	b.n	8001252 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
 800124a:	e002      	b.n	8001252 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 f969 	bl	8001524 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d024      	beq.n	80012a6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001264:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f943 	bl	80014fc <HAL_CAN_TxMailbox2CompleteCallback>
 8001276:	e016      	b.n	80012a6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
 800128a:	e00c      	b.n	80012a6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d004      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	e002      	b.n	80012a6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f949 	bl	8001538 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00c      	beq.n	80012ca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2210      	movs	r2, #16
 80012c8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2208      	movs	r2, #8
 80012e4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f930 	bl	800154c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7fe ff61 	bl	80001cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00c      	beq.n	800132e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001324:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2210      	movs	r2, #16
 800132c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	f003 0320 	and.w	r3, r3, #32
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00b      	beq.n	8001350 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2208      	movs	r2, #8
 8001348:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f912 	bl	8001574 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	2b00      	cmp	r3, #0
 8001358:	d009      	beq.n	800136e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f8f9 	bl	8001560 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00b      	beq.n	8001390 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2210      	movs	r2, #16
 8001388:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f8fc 	bl	8001588 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00b      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2208      	movs	r2, #8
 80013aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f8f5 	bl	800159c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d07b      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d072      	beq.n	80014ac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001404:	2b00      	cmp	r3, #0
 8001406:	d008      	beq.n	800141a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001420:	2b00      	cmp	r3, #0
 8001422:	d043      	beq.n	80014ac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800142a:	2b00      	cmp	r3, #0
 800142c:	d03e      	beq.n	80014ac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001434:	2b60      	cmp	r3, #96	; 0x60
 8001436:	d02b      	beq.n	8001490 <HAL_CAN_IRQHandler+0x32a>
 8001438:	2b60      	cmp	r3, #96	; 0x60
 800143a:	d82e      	bhi.n	800149a <HAL_CAN_IRQHandler+0x334>
 800143c:	2b50      	cmp	r3, #80	; 0x50
 800143e:	d022      	beq.n	8001486 <HAL_CAN_IRQHandler+0x320>
 8001440:	2b50      	cmp	r3, #80	; 0x50
 8001442:	d82a      	bhi.n	800149a <HAL_CAN_IRQHandler+0x334>
 8001444:	2b40      	cmp	r3, #64	; 0x40
 8001446:	d019      	beq.n	800147c <HAL_CAN_IRQHandler+0x316>
 8001448:	2b40      	cmp	r3, #64	; 0x40
 800144a:	d826      	bhi.n	800149a <HAL_CAN_IRQHandler+0x334>
 800144c:	2b30      	cmp	r3, #48	; 0x30
 800144e:	d010      	beq.n	8001472 <HAL_CAN_IRQHandler+0x30c>
 8001450:	2b30      	cmp	r3, #48	; 0x30
 8001452:	d822      	bhi.n	800149a <HAL_CAN_IRQHandler+0x334>
 8001454:	2b10      	cmp	r3, #16
 8001456:	d002      	beq.n	800145e <HAL_CAN_IRQHandler+0x2f8>
 8001458:	2b20      	cmp	r3, #32
 800145a:	d005      	beq.n	8001468 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800145c:	e01d      	b.n	800149a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001466:	e019      	b.n	800149c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	f043 0310 	orr.w	r3, r3, #16
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001470:	e014      	b.n	800149c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800147a:	e00f      	b.n	800149c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001484:	e00a      	b.n	800149c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800148e:	e005      	b.n	800149c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001498:	e000      	b.n	800149c <HAL_CAN_IRQHandler+0x336>
            break;
 800149a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	699a      	ldr	r2, [r3, #24]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014aa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2204      	movs	r2, #4
 80014b2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d008      	beq.n	80014cc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f872 	bl	80015b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db0b      	blt.n	8001652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 021f 	and.w	r2, r3, #31
 8001640:	4907      	ldr	r1, [pc, #28]	; (8001660 <__NVIC_EnableIRQ+0x38>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	2001      	movs	r0, #1
 800164a:	fa00 f202 	lsl.w	r2, r0, r2
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000e100 	.word	0xe000e100

08001664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db0a      	blt.n	800168e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <__NVIC_SetPriority+0x4c>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800168c:	e00a      	b.n	80016a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <__NVIC_SetPriority+0x50>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3b04      	subs	r3, #4
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	761a      	strb	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf28      	it	cs
 80016d6:	2304      	movcs	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3304      	adds	r3, #4
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d902      	bls.n	80016e8 <NVIC_EncodePriority+0x30>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	e000      	b.n	80016ea <NVIC_EncodePriority+0x32>
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001700:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43d9      	mvns	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	4313      	orrs	r3, r2
         );
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	; 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001744:	f7ff ff8e 	bl	8001664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff29 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff3e 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff8e 	bl	80016b8 <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5d 	bl	8001664 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff31 	bl	8001628 <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa2 	bl	8001720 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e148      	b.n	8001a8a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 813a 	beq.w	8001a84 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d005      	beq.n	8001828 <HAL_GPIO_Init+0x40>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d130      	bne.n	800188a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800185e:	2201      	movs	r2, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f003 0201 	and.w	r2, r3, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b03      	cmp	r3, #3
 8001894:	d017      	beq.n	80018c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d123      	bne.n	800191a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	08da      	lsrs	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3208      	adds	r2, #8
 80018da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	6939      	ldr	r1, [r7, #16]
 8001916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0203 	and.w	r2, r3, #3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8094 	beq.w	8001a84 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195c:	4b52      	ldr	r3, [pc, #328]	; (8001aa8 <HAL_GPIO_Init+0x2c0>)
 800195e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001960:	4a51      	ldr	r2, [pc, #324]	; (8001aa8 <HAL_GPIO_Init+0x2c0>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6613      	str	r3, [r2, #96]	; 0x60
 8001968:	4b4f      	ldr	r3, [pc, #316]	; (8001aa8 <HAL_GPIO_Init+0x2c0>)
 800196a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001974:	4a4d      	ldr	r2, [pc, #308]	; (8001aac <HAL_GPIO_Init+0x2c4>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800199e:	d00d      	beq.n	80019bc <HAL_GPIO_Init+0x1d4>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a43      	ldr	r2, [pc, #268]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d007      	beq.n	80019b8 <HAL_GPIO_Init+0x1d0>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a42      	ldr	r2, [pc, #264]	; (8001ab4 <HAL_GPIO_Init+0x2cc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_GPIO_Init+0x1cc>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e004      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019b4:	2307      	movs	r3, #7
 80019b6:	e002      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019bc:	2300      	movs	r3, #0
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	f002 0203 	and.w	r2, r2, #3
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	4093      	lsls	r3, r2
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ce:	4937      	ldr	r1, [pc, #220]	; (8001aac <HAL_GPIO_Init+0x2c4>)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a00:	4a2d      	ldr	r2, [pc, #180]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a06:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a2a:	4a23      	ldr	r2, [pc, #140]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a54:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f47f aeaf 	bne.w	80017f8 <HAL_GPIO_Init+0x10>
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	48000400 	.word	0x48000400
 8001ab4:	48000800 	.word	0x48000800
 8001ab8:	40010400 	.word	0x40010400

08001abc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40007000 	.word	0x40007000

08001ad8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae6:	d130      	bne.n	8001b4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af4:	d038      	beq.n	8001b68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001afe:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2232      	movs	r2, #50	; 0x32
 8001b0c:	fb02 f303 	mul.w	r3, r2, r3
 8001b10:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0c9b      	lsrs	r3, r3, #18
 8001b18:	3301      	adds	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1c:	e002      	b.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b30:	d102      	bne.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f2      	bne.n	8001b1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b44:	d110      	bne.n	8001b68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e00f      	b.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b56:	d007      	beq.n	8001b68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b60:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	431bde83 	.word	0x431bde83

08001b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f000 bc02 	b.w	800239c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b98:	4b96      	ldr	r3, [pc, #600]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba2:	4b94      	ldr	r3, [pc, #592]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80e4 	beq.w	8001d82 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4c>
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	f040 808b 	bne.w	8001cde <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	f040 8087 	bne.w	8001cde <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bd0:	4b88      	ldr	r3, [pc, #544]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_OscConfig+0x64>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e3d9      	b.n	800239c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1a      	ldr	r2, [r3, #32]
 8001bec:	4b81      	ldr	r3, [pc, #516]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <HAL_RCC_OscConfig+0x7e>
 8001bf8:	4b7e      	ldr	r3, [pc, #504]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c00:	e005      	b.n	8001c0e <HAL_RCC_OscConfig+0x8a>
 8001c02:	4b7c      	ldr	r3, [pc, #496]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d223      	bcs.n	8001c5a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fd54 	bl	80026c4 <RCC_SetFlashLatencyFromMSIRange>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e3ba      	b.n	800239c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c26:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a72      	ldr	r2, [pc, #456]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b70      	ldr	r3, [pc, #448]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	496d      	ldr	r1, [pc, #436]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c44:	4b6b      	ldr	r3, [pc, #428]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	4968      	ldr	r1, [pc, #416]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
 8001c58:	e025      	b.n	8001ca6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5a:	4b66      	ldr	r3, [pc, #408]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a65      	ldr	r2, [pc, #404]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4960      	ldr	r1, [pc, #384]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c78:	4b5e      	ldr	r3, [pc, #376]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	495b      	ldr	r1, [pc, #364]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fd14 	bl	80026c4 <RCC_SetFlashLatencyFromMSIRange>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e37a      	b.n	800239c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ca6:	f000 fc81 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8001caa:	4602      	mov	r2, r0
 8001cac:	4b51      	ldr	r3, [pc, #324]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	4950      	ldr	r1, [pc, #320]	; (8001df8 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	5ccb      	ldrb	r3, [r1, r3]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <HAL_RCC_OscConfig+0x278>)
 8001cc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cc6:	4b4e      	ldr	r3, [pc, #312]	; (8001e00 <HAL_RCC_OscConfig+0x27c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fdde 	bl	800088c <HAL_InitTick>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d052      	beq.n	8001d80 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	e35e      	b.n	800239c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d032      	beq.n	8001d4c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ce6:	4b43      	ldr	r3, [pc, #268]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a42      	ldr	r2, [pc, #264]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cf2:	f7fe fe1b 	bl	800092c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cfa:	f7fe fe17 	bl	800092c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e347      	b.n	800239c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d0c:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d18:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a35      	ldr	r2, [pc, #212]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4930      	ldr	r1, [pc, #192]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d36:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	492b      	ldr	r1, [pc, #172]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
 8001d4a:	e01a      	b.n	8001d82 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a28      	ldr	r2, [pc, #160]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d58:	f7fe fde8 	bl	800092c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d60:	f7fe fde4 	bl	800092c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e314      	b.n	800239c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1dc>
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d073      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_OscConfig+0x21c>
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d10e      	bne.n	8001db8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d10b      	bne.n	8001db8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d063      	beq.n	8001e74 <HAL_RCC_OscConfig+0x2f0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d15f      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e2f1      	b.n	800239c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x24c>
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e025      	b.n	8001e1c <HAL_RCC_OscConfig+0x298>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd8:	d114      	bne.n	8001e04 <HAL_RCC_OscConfig+0x280>
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a02      	ldr	r2, [pc, #8]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e013      	b.n	8001e1c <HAL_RCC_OscConfig+0x298>
 8001df4:	40021000 	.word	0x40021000
 8001df8:	08002844 	.word	0x08002844
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000004 	.word	0x20000004
 8001e04:	4ba0      	ldr	r3, [pc, #640]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a9f      	ldr	r2, [pc, #636]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b9d      	ldr	r3, [pc, #628]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a9c      	ldr	r2, [pc, #624]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7fe fd82 	bl	800092c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7fe fd7e 	bl	800092c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e2ae      	b.n	800239c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3e:	4b92      	ldr	r3, [pc, #584]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x2a8>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fd6e 	bl	800092c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7fe fd6a 	bl	800092c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e29a      	b.n	800239c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e66:	4b88      	ldr	r3, [pc, #544]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x2d0>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d060      	beq.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_OscConfig+0x310>
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d119      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d116      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e94:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_OscConfig+0x328>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e277      	b.n	800239c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b76      	ldr	r3, [pc, #472]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	061b      	lsls	r3, r3, #24
 8001eba:	4973      	ldr	r1, [pc, #460]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec0:	e040      	b.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d023      	beq.n	8001f12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eca:	4b6f      	ldr	r3, [pc, #444]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6e      	ldr	r2, [pc, #440]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7fe fd29 	bl	800092c <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ede:	f7fe fd25 	bl	800092c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e255      	b.n	800239c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef0:	4b65      	ldr	r3, [pc, #404]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efc:	4b62      	ldr	r3, [pc, #392]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	495f      	ldr	r1, [pc, #380]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
 8001f10:	e018      	b.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f12:	4b5d      	ldr	r3, [pc, #372]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a5c      	ldr	r2, [pc, #368]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7fe fd05 	bl	800092c <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f26:	f7fe fd01 	bl	800092c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e231      	b.n	800239c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d03c      	beq.n	8001fca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01c      	beq.n	8001f92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f58:	4b4b      	ldr	r3, [pc, #300]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5e:	4a4a      	ldr	r2, [pc, #296]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7fe fce0 	bl	800092c <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f70:	f7fe fcdc 	bl	800092c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e20c      	b.n	800239c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ef      	beq.n	8001f70 <HAL_RCC_OscConfig+0x3ec>
 8001f90:	e01b      	b.n	8001fca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f98:	4a3b      	ldr	r2, [pc, #236]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fcc3 	bl	800092c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001faa:	f7fe fcbf 	bl	800092c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1ef      	b.n	800239c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fbc:	4b32      	ldr	r3, [pc, #200]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ef      	bne.n	8001faa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80a6 	beq.w	8002124 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10d      	bne.n	8002004 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	4a26      	ldr	r2, [pc, #152]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002000:	2301      	movs	r3, #1
 8002002:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_RCC_OscConfig+0x508>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d118      	bne.n	8002042 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_RCC_OscConfig+0x508>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_RCC_OscConfig+0x508>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201c:	f7fe fc86 	bl	800092c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002024:	f7fe fc82 	bl	800092c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1b2      	b.n	800239c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_RCC_OscConfig+0x508>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d108      	bne.n	800205c <HAL_RCC_OscConfig+0x4d8>
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002050:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205a:	e029      	b.n	80020b0 <HAL_RCC_OscConfig+0x52c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b05      	cmp	r3, #5
 8002062:	d115      	bne.n	8002090 <HAL_RCC_OscConfig+0x50c>
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a07      	ldr	r2, [pc, #28]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	4a03      	ldr	r2, [pc, #12]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002084:	e014      	b.n	80020b0 <HAL_RCC_OscConfig+0x52c>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	40007000 	.word	0x40007000
 8002090:	4b9a      	ldr	r3, [pc, #616]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	4a99      	ldr	r2, [pc, #612]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a0:	4b96      	ldr	r3, [pc, #600]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	4a95      	ldr	r2, [pc, #596]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d016      	beq.n	80020e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7fe fc38 	bl	800092c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7fe fc34 	bl	800092c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e162      	b.n	800239c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d6:	4b89      	ldr	r3, [pc, #548]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ed      	beq.n	80020c0 <HAL_RCC_OscConfig+0x53c>
 80020e4:	e015      	b.n	8002112 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7fe fc21 	bl	800092c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7fe fc1d 	bl	800092c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e14b      	b.n	800239c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002104:	4b7d      	ldr	r3, [pc, #500]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ed      	bne.n	80020ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002112:	7ffb      	ldrb	r3, [r7, #31]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002118:	4b78      	ldr	r3, [pc, #480]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	4a77      	ldr	r2, [pc, #476]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 800211e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002122:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d03c      	beq.n	80021aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01c      	beq.n	8002172 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002138:	4b70      	ldr	r3, [pc, #448]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 800213a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800213e:	4a6f      	ldr	r2, [pc, #444]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7fe fbf0 	bl	800092c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002150:	f7fe fbec 	bl	800092c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e11c      	b.n	800239c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002162:	4b66      	ldr	r3, [pc, #408]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 8002164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ef      	beq.n	8002150 <HAL_RCC_OscConfig+0x5cc>
 8002170:	e01b      	b.n	80021aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002172:	4b62      	ldr	r3, [pc, #392]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 8002174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002178:	4a60      	ldr	r2, [pc, #384]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7fe fbd3 	bl	800092c <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800218a:	f7fe fbcf 	bl	800092c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0ff      	b.n	800239c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800219c:	4b57      	ldr	r3, [pc, #348]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 800219e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1ef      	bne.n	800218a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80f3 	beq.w	800239a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	f040 80c9 	bne.w	8002350 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021be:	4b4f      	ldr	r3, [pc, #316]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 0203 	and.w	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d12c      	bne.n	800222c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	3b01      	subs	r3, #1
 80021de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d123      	bne.n	800222c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d11b      	bne.n	800222c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d113      	bne.n	800222c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	3b01      	subs	r3, #1
 8002212:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d109      	bne.n	800222c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	3b01      	subs	r3, #1
 8002226:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d06b      	beq.n	8002304 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d062      	beq.n	80022f8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002232:	4b32      	ldr	r3, [pc, #200]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0ac      	b.n	800239c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002242:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2d      	ldr	r2, [pc, #180]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 8002248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800224c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800224e:	f7fe fb6d 	bl	800092c <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe fb69 	bl	800092c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e099      	b.n	800239c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	4b21      	ldr	r3, [pc, #132]	; (8002300 <HAL_RCC_OscConfig+0x77c>)
 800227a:	4013      	ands	r3, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002284:	3a01      	subs	r2, #1
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	4311      	orrs	r1, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800228e:	0212      	lsls	r2, r2, #8
 8002290:	4311      	orrs	r1, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002296:	0852      	lsrs	r2, r2, #1
 8002298:	3a01      	subs	r2, #1
 800229a:	0552      	lsls	r2, r2, #21
 800229c:	4311      	orrs	r1, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022a2:	0852      	lsrs	r2, r2, #1
 80022a4:	3a01      	subs	r2, #1
 80022a6:	0652      	lsls	r2, r2, #25
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022ae:	06d2      	lsls	r2, r2, #27
 80022b0:	430a      	orrs	r2, r1
 80022b2:	4912      	ldr	r1, [pc, #72]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0f      	ldr	r2, [pc, #60]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 80022be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 80022ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022d0:	f7fe fb2c 	bl	800092c <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d8:	f7fe fb28 	bl	800092c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e058      	b.n	800239c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <HAL_RCC_OscConfig+0x778>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f6:	e050      	b.n	800239a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e04f      	b.n	800239c <HAL_RCC_OscConfig+0x818>
 80022fc:	40021000 	.word	0x40021000
 8002300:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_OscConfig+0x820>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d144      	bne.n	800239a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_OscConfig+0x820>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <HAL_RCC_OscConfig+0x820>)
 8002316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800231c:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <HAL_RCC_OscConfig+0x820>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a20      	ldr	r2, [pc, #128]	; (80023a4 <HAL_RCC_OscConfig+0x820>)
 8002322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002326:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002328:	f7fe fb00 	bl	800092c <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fafc 	bl	800092c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e02c      	b.n	800239c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_RCC_OscConfig+0x820>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x7ac>
 800234e:	e024      	b.n	800239a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d01f      	beq.n	8002396 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_RCC_OscConfig+0x820>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <HAL_RCC_OscConfig+0x820>)
 800235c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe fae3 	bl	800092c <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236a:	f7fe fadf 	bl	800092c <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e00f      	b.n	800239c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_OscConfig+0x820>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f0      	bne.n	800236a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_RCC_OscConfig+0x820>)
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	4905      	ldr	r1, [pc, #20]	; (80023a4 <HAL_RCC_OscConfig+0x820>)
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_RCC_OscConfig+0x824>)
 8002390:	4013      	ands	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
 8002394:	e001      	b.n	800239a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000
 80023a8:	feeefffc 	.word	0xfeeefffc

080023ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0e7      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b75      	ldr	r3, [pc, #468]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d910      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b72      	ldr	r3, [pc, #456]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 0207 	bic.w	r2, r3, #7
 80023d6:	4970      	ldr	r1, [pc, #448]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b6e      	ldr	r3, [pc, #440]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0cf      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d010      	beq.n	800241e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	4b66      	ldr	r3, [pc, #408]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002408:	429a      	cmp	r2, r3
 800240a:	d908      	bls.n	800241e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240c:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4960      	ldr	r1, [pc, #384]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d04c      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002432:	4b5a      	ldr	r3, [pc, #360]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d121      	bne.n	8002482 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e0a6      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244a:	4b54      	ldr	r3, [pc, #336]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d115      	bne.n	8002482 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e09a      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002462:	4b4e      	ldr	r3, [pc, #312]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e08e      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002472:	4b4a      	ldr	r3, [pc, #296]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e086      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002482:	4b46      	ldr	r3, [pc, #280]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f023 0203 	bic.w	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4943      	ldr	r1, [pc, #268]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002490:	4313      	orrs	r3, r2
 8002492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002494:	f7fe fa4a 	bl	800092c <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249c:	f7fe fa46 	bl	800092c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e06e      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	4b3a      	ldr	r3, [pc, #232]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 020c 	and.w	r2, r3, #12
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d1eb      	bne.n	800249c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d010      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024dc:	429a      	cmp	r2, r3
 80024de:	d208      	bcs.n	80024f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e0:	4b2e      	ldr	r3, [pc, #184]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	492b      	ldr	r1, [pc, #172]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d210      	bcs.n	8002522 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002500:	4b25      	ldr	r3, [pc, #148]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 0207 	bic.w	r2, r3, #7
 8002508:	4923      	ldr	r1, [pc, #140]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002510:	4b21      	ldr	r3, [pc, #132]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d001      	beq.n	8002522 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e036      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4918      	ldr	r1, [pc, #96]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d009      	beq.n	8002560 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4910      	ldr	r1, [pc, #64]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002560:	f000 f824 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	490b      	ldr	r1, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
 800257c:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 800257e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe f981 	bl	800088c <HAL_InitTick>
 800258a:	4603      	mov	r3, r0
 800258c:	72fb      	strb	r3, [r7, #11]

  return status;
 800258e:	7afb      	ldrb	r3, [r7, #11]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40022000 	.word	0x40022000
 800259c:	40021000 	.word	0x40021000
 80025a0:	08002844 	.word	0x08002844
 80025a4:	20000000 	.word	0x20000000
 80025a8:	20000004 	.word	0x20000004

080025ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	; 0x24
 80025b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ba:	4b3e      	ldr	r3, [pc, #248]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c4:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x34>
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d121      	bne.n	800261e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d11e      	bne.n	800261e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025e0:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025ec:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e005      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025fc:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002608:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10d      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d102      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e004      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d101      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002630:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002632:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d134      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800263a:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d003      	beq.n	8002652 <HAL_RCC_GetSysClockFreq+0xa6>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d003      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0xac>
 8002650:	e005      	b.n	800265e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002654:	617b      	str	r3, [r7, #20]
      break;
 8002656:	e005      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800265a:	617b      	str	r3, [r7, #20]
      break;
 800265c:	e002      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	617b      	str	r3, [r7, #20]
      break;
 8002662:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	3301      	adds	r3, #1
 8002670:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	fb03 f202 	mul.w	r2, r3, r2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	0e5b      	lsrs	r3, r3, #25
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	3301      	adds	r3, #1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026a4:	69bb      	ldr	r3, [r7, #24]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	; 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08002854 	.word	0x08002854
 80026bc:	00f42400 	.word	0x00f42400
 80026c0:	007a1200 	.word	0x007a1200

080026c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026d0:	4b2a      	ldr	r3, [pc, #168]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026dc:	f7ff f9ee 	bl	8001abc <HAL_PWREx_GetVoltageRange>
 80026e0:	6178      	str	r0, [r7, #20]
 80026e2:	e014      	b.n	800270e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4a24      	ldr	r2, [pc, #144]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	; 0x58
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026fc:	f7ff f9de 	bl	8001abc <HAL_PWREx_GetVoltageRange>
 8002700:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	4a1d      	ldr	r2, [pc, #116]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002714:	d10b      	bne.n	800272e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b80      	cmp	r3, #128	; 0x80
 800271a:	d919      	bls.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2ba0      	cmp	r3, #160	; 0xa0
 8002720:	d902      	bls.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002722:	2302      	movs	r3, #2
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	e013      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002728:	2301      	movs	r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e010      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b80      	cmp	r3, #128	; 0x80
 8002732:	d902      	bls.n	800273a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002734:	2303      	movs	r3, #3
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	e00a      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d102      	bne.n	8002746 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002740:	2302      	movs	r3, #2
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	e004      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b70      	cmp	r3, #112	; 0x70
 800274a:	d101      	bne.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800274c:	2301      	movs	r3, #1
 800274e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 0207 	bic.w	r2, r3, #7
 8002758:	4909      	ldr	r1, [pc, #36]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	40022000 	.word	0x40022000

08002784 <__errno>:
 8002784:	4b01      	ldr	r3, [pc, #4]	; (800278c <__errno+0x8>)
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	2000000c 	.word	0x2000000c

08002790 <exit>:
 8002790:	b508      	push	{r3, lr}
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <exit+0x20>)
 8002794:	4604      	mov	r4, r0
 8002796:	b113      	cbz	r3, 800279e <exit+0xe>
 8002798:	2100      	movs	r1, #0
 800279a:	f3af 8000 	nop.w
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <exit+0x24>)
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80027a4:	b103      	cbz	r3, 80027a8 <exit+0x18>
 80027a6:	4798      	blx	r3
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7fe f811 	bl	80007d0 <_exit>
 80027ae:	bf00      	nop
 80027b0:	00000000 	.word	0x00000000
 80027b4:	08002884 	.word	0x08002884

080027b8 <__libc_init_array>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	4d0d      	ldr	r5, [pc, #52]	; (80027f0 <__libc_init_array+0x38>)
 80027bc:	4c0d      	ldr	r4, [pc, #52]	; (80027f4 <__libc_init_array+0x3c>)
 80027be:	1b64      	subs	r4, r4, r5
 80027c0:	10a4      	asrs	r4, r4, #2
 80027c2:	2600      	movs	r6, #0
 80027c4:	42a6      	cmp	r6, r4
 80027c6:	d109      	bne.n	80027dc <__libc_init_array+0x24>
 80027c8:	4d0b      	ldr	r5, [pc, #44]	; (80027f8 <__libc_init_array+0x40>)
 80027ca:	4c0c      	ldr	r4, [pc, #48]	; (80027fc <__libc_init_array+0x44>)
 80027cc:	f000 f82e 	bl	800282c <_init>
 80027d0:	1b64      	subs	r4, r4, r5
 80027d2:	10a4      	asrs	r4, r4, #2
 80027d4:	2600      	movs	r6, #0
 80027d6:	42a6      	cmp	r6, r4
 80027d8:	d105      	bne.n	80027e6 <__libc_init_array+0x2e>
 80027da:	bd70      	pop	{r4, r5, r6, pc}
 80027dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e0:	4798      	blx	r3
 80027e2:	3601      	adds	r6, #1
 80027e4:	e7ee      	b.n	80027c4 <__libc_init_array+0xc>
 80027e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ea:	4798      	blx	r3
 80027ec:	3601      	adds	r6, #1
 80027ee:	e7f2      	b.n	80027d6 <__libc_init_array+0x1e>
 80027f0:	08002888 	.word	0x08002888
 80027f4:	08002888 	.word	0x08002888
 80027f8:	08002888 	.word	0x08002888
 80027fc:	0800288c 	.word	0x0800288c

08002800 <memcpy>:
 8002800:	440a      	add	r2, r1
 8002802:	4291      	cmp	r1, r2
 8002804:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002808:	d100      	bne.n	800280c <memcpy+0xc>
 800280a:	4770      	bx	lr
 800280c:	b510      	push	{r4, lr}
 800280e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002816:	4291      	cmp	r1, r2
 8002818:	d1f9      	bne.n	800280e <memcpy+0xe>
 800281a:	bd10      	pop	{r4, pc}

0800281c <memset>:
 800281c:	4402      	add	r2, r0
 800281e:	4603      	mov	r3, r0
 8002820:	4293      	cmp	r3, r2
 8002822:	d100      	bne.n	8002826 <memset+0xa>
 8002824:	4770      	bx	lr
 8002826:	f803 1b01 	strb.w	r1, [r3], #1
 800282a:	e7f9      	b.n	8002820 <memset+0x4>

0800282c <_init>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	bf00      	nop
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr

08002838 <_fini>:
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283a:	bf00      	nop
 800283c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283e:	bc08      	pop	{r3}
 8002840:	469e      	mov	lr, r3
 8002842:	4770      	bx	lr
