
L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029dc  080029dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080029dc  080029dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029dc  080029dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029dc  080029dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e0  080029e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080029e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  08002a54  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002a54  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079b0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001869  00000000  00000000  00027a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  000292c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  00029a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020654  00000000  00000000  0002a128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000079e2  00000000  00000000  0004a77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfd13  00000000  00000000  0005215e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111e71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dac  00000000  00000000  00111ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002958 	.word	0x08002958

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08002958 	.word	0x08002958

080001cc <is_valid_addr>:
extern CAN_HandleTypeDef hcan_p;
extern uint8_t CanAdresse;
extern graph_state_t state;


bool is_valid_addr(CAN_ADDR addr) {
 80001cc:	b4b0      	push	{r4, r5, r7}
 80001ce:	b0a3      	sub	sp, #140	; 0x8c
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	int size = sizeof(ADDR_LIST) / sizeof(ADDR_LIST[0]);
 80001d4:	230a      	movs	r3, #10
 80001d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	for (int i = 0; i < size; i++)
 80001da:	2300      	movs	r3, #0
 80001dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80001e0:	e01c      	b.n	800021c <is_valid_addr+0x50>
		if (ADDR_LIST[i] == addr)
 80001e2:	4b14      	ldr	r3, [pc, #80]	; (8000234 <is_valid_addr+0x68>)
 80001e4:	f107 0408 	add.w	r4, r7, #8
 80001e8:	461d      	mov	r5, r3
 80001ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80001f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80001fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	3388      	adds	r3, #136	; 0x88
 8000202:	443b      	add	r3, r7
 8000204:	f853 2c80 	ldr.w	r2, [r3, #-128]
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	429a      	cmp	r2, r3
 800020c:	d101      	bne.n	8000212 <is_valid_addr+0x46>
			return true;
 800020e:	2301      	movs	r3, #1
 8000210:	e00b      	b.n	800022a <is_valid_addr+0x5e>
	for (int i = 0; i < size; i++)
 8000212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000216:	3301      	adds	r3, #1
 8000218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800021c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000220:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000224:	429a      	cmp	r2, r3
 8000226:	dbdc      	blt.n	80001e2 <is_valid_addr+0x16>

	return false;
 8000228:	2300      	movs	r3, #0
}
 800022a:	4618      	mov	r0, r3
 800022c:	378c      	adds	r7, #140	; 0x8c
 800022e:	46bd      	mov	sp, r7
 8000230:	bcb0      	pop	{r4, r5, r7}
 8000232:	4770      	bx	lr
 8000234:	08002970 	.word	0x08002970

08000238 <is_valid_fct_code>:


bool is_valid_fct_code(CAN_FCT_CODE fct_code) {
 8000238:	b4b0      	push	{r4, r5, r7}
 800023a:	b095      	sub	sp, #84	; 0x54
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	int size = sizeof(FCT_CODE_LIST) / sizeof(FCT_CODE_LIST[0]);
 8000240:	2303      	movs	r3, #3
 8000242:	64bb      	str	r3, [r7, #72]	; 0x48

	for (int i = 0; i < size; i++)
 8000244:	2300      	movs	r3, #0
 8000246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000248:	e019      	b.n	800027e <is_valid_fct_code+0x46>
		if (ADDR_LIST[i] == fct_code)
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <is_valid_fct_code+0x5c>)
 800024c:	f107 0408 	add.w	r4, r7, #8
 8000250:	461d      	mov	r5, r3
 8000252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800025e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	3350      	adds	r3, #80	; 0x50
 8000268:	443b      	add	r3, r7
 800026a:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	429a      	cmp	r2, r3
 8000272:	d101      	bne.n	8000278 <is_valid_fct_code+0x40>
			return true;
 8000274:	2301      	movs	r3, #1
 8000276:	e007      	b.n	8000288 <is_valid_fct_code+0x50>
	for (int i = 0; i < size; i++)
 8000278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800027a:	3301      	adds	r3, #1
 800027c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800027e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000282:	429a      	cmp	r2, r3
 8000284:	dbe1      	blt.n	800024a <is_valid_fct_code+0x12>

	return false;
 8000286:	2300      	movs	r3, #0
}
 8000288:	4618      	mov	r0, r3
 800028a:	3754      	adds	r7, #84	; 0x54
 800028c:	46bd      	mov	sp, r7
 800028e:	bcb0      	pop	{r4, r5, r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	08002970 	.word	0x08002970

08000298 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \param isRep vrai si c'est une reponse a une requete, faux sinon
 * \param RepId indique le nombre de reponse atendu pour une requete et le num de la reponse pour une reponse
 * \param dataLen frame payload length in byte (0 .. 8) aka data length code
 * \param data CAN frame payload (up to 8 byte)
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000298:	b5b0      	push	{r4, r5, r7, lr}
 800029a:	b098      	sub	sp, #96	; 0x60
 800029c:	af06      	add	r7, sp, #24
 800029e:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80002a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80002a8:	2100      	movs	r1, #0
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 feb9 	bl	8001022 <HAL_CAN_GetRxMessage>

	uint8_t data[1];
	can_mess_t msg = process_frame(RxHeader, RxData);
 80002b0:	f107 0508 	add.w	r5, r7, #8
 80002b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	466c      	mov	r4, sp
 80002bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80002c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80002cc:	4628      	mov	r0, r5
 80002ce:	f000 f8d7 	bl	8000480 <process_frame>

	switch(msg.fct_code) {
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002d8:	d023      	beq.n	8000322 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 80002da:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 80002de:	d133      	bne.n	8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
	case FCT_CHANGEMENT_ETAT:
		state.len = msg.data_len;
 80002e0:	7dfa      	ldrb	r2, [r7, #23]
 80002e2:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80002e4:	711a      	strb	r2, [r3, #4]
		memcpy(state.data, msg.data, msg.data_len);
 80002e6:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80002e8:	6818      	ldr	r0, [r3, #0]
 80002ea:	7dfb      	ldrb	r3, [r7, #23]
 80002ec:	461a      	mov	r2, r3
 80002ee:	f107 0308 	add.w	r3, r7, #8
 80002f2:	3310      	adds	r3, #16
 80002f4:	4619      	mov	r1, r3
 80002f6:	f002 fb19 	bl	800292c <memcpy>
		send(CAN_ADDR_RASPBERRY, FCT_CHANGEMENT_ETAT, msg.data, msg.data_len, false, 0, msg.message_id);
 80002fa:	7dfb      	ldrb	r3, [r7, #23]
 80002fc:	4618      	mov	r0, r3
 80002fe:	7d3b      	ldrb	r3, [r7, #20]
 8000300:	4619      	mov	r1, r3
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	f103 0210 	add.w	r2, r3, #16
 800030a:	9102      	str	r1, [sp, #8]
 800030c:	2300      	movs	r3, #0
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	2300      	movs	r3, #0
 8000312:	9300      	str	r3, [sp, #0]
 8000314:	4603      	mov	r3, r0
 8000316:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800031a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800031e:	f000 f865 	bl	80003ec <send>
	case FCT_TEST_COMM:
		data[0] = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	f887 3020 	strb.w	r3, [r7, #32]
		send(CAN_ADDR_RASPBERRY, FCT_TEST_COMM, data, 1, true, 1, msg.message_id);
 8000328:	7d3b      	ldrb	r3, [r7, #20]
 800032a:	f107 0220 	add.w	r2, r7, #32
 800032e:	9302      	str	r3, [sp, #8]
 8000330:	2301      	movs	r3, #1
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	2301      	movs	r3, #1
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	2301      	movs	r3, #1
 800033a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800033e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000342:	f000 f853 	bl	80003ec <send>
	break;
 8000346:	e000      	b.n	800034a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
	default:
	break;
 8000348:	bf00      	nop
	}
}
 800034a:	bf00      	nop
 800034c:	3748      	adds	r7, #72	; 0x48
 800034e:	46bd      	mov	sp, r7
 8000350:	bdb0      	pop	{r4, r5, r7, pc}
 8000352:	bf00      	nop
 8000354:	200000e0 	.word	0x200000e0

08000358 <configure_CAN>:


void configure_CAN(CAN_HandleTypeDef hcan, CAN_EMIT_ADDR addr) {
 8000358:	b084      	sub	sp, #16
 800035a:	b5b0      	push	{r4, r5, r7, lr}
 800035c:	b08a      	sub	sp, #40	; 0x28
 800035e:	af00      	add	r7, sp, #0
 8000360:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; // Filtrage par liste ou par masque
 8000368:	2300      	movs	r3, #0
 800036a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // Filtre de 32 bits ou 1 de 16 bits
 800036c:	2300      	movs	r3, #0
 800036e:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; // 3 files avec 3 filtres par file
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
	sFilterConfig.SlaveStartFilterBank = 14; // Choix du filtre dans la banque
 8000374:	230e      	movs	r3, #14
 8000376:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterActivation = ENABLE;
 8000378:	2301      	movs	r3, #1
 800037a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterMaskIdLow = 0b111100000000000;
 800037c:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000380:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = 0b111100000000000; // Masque utilisé
 8000382:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000386:	60bb      	str	r3, [r7, #8]

	sFilterConfig.FilterBank = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0b001000000000000; // Adresse de l'émetteur
 800038c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000390:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0b111100000000000;
 8000392:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000396:	607b      	str	r3, [r7, #4]

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000398:	463b      	mov	r3, r7
 800039a:	4619      	mov	r1, r3
 800039c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80003a0:	f000 fc61 	bl	8000c66 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan); // Démarrer le périphérique CAN
 80003a4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80003a8:	f000 fd27 	bl	8000dfa <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Activer le mode interruption
 80003ac:	2102      	movs	r1, #2
 80003ae:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80003b2:	f000 ff48 	bl	8001246 <HAL_CAN_ActivateNotification>

	hcan_p = hcan;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <configure_CAN+0x8c>)
 80003b8:	461d      	mov	r5, r3
 80003ba:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80003be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80003ca:	e885 0003 	stmia.w	r5, {r0, r1}
	CanAdresse = addr;
 80003ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <configure_CAN+0x90>)
 80003d4:	701a      	strb	r2, [r3, #0]
}
 80003d6:	bf00      	nop
 80003d8:	3728      	adds	r7, #40	; 0x28
 80003da:	46bd      	mov	sp, r7
 80003dc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80003e0:	b004      	add	sp, #16
 80003e2:	4770      	bx	lr
 80003e4:	200000b4 	.word	0x200000b4
 80003e8:	200000dc 	.word	0x200000dc

080003ec <send>:


int send(CAN_ADDR addr, CAN_FCT_CODE fct_code, uint8_t data[], uint data_len, bool is_rep, uint rep_len, uint msg_id){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08c      	sub	sp, #48	; 0x30
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
 80003f8:	603b      	str	r3, [r7, #0]
	if (data_len > 8)
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	2b08      	cmp	r3, #8
 80003fe:	d901      	bls.n	8000404 <send+0x18>
		return CAN_E_DATA_SIZE_TOO_LONG;
 8000400:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <send+0x88>)
 8000402:	e033      	b.n	800046c <send+0x80>

	if(addr < 0 || addr > CAN_MAX_VALUE_ADDR) return CAN_E_OOB_ADDR;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	2b10      	cmp	r3, #16
 8000408:	d902      	bls.n	8000410 <send+0x24>
 800040a:	f46f 73ff 	mvn.w	r3, #510	; 0x1fe
 800040e:	e02d      	b.n	800046c <send+0x80>
	if(fct_code < 0 || fct_code > CAN_MAX_VALUE_CODE_FCT) return CAN_E_OOB_CODE_FCT;
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	2b80      	cmp	r3, #128	; 0x80
 8000414:	d901      	bls.n	800041a <send+0x2e>
 8000416:	4b18      	ldr	r3, [pc, #96]	; (8000478 <send+0x8c>)
 8000418:	e028      	b.n	800046c <send+0x80>
	if(rep_len < 0 || rep_len > CAN_MAX_VALUE_REP_NBR) return CAN_E_OOB_REP_NBR;
 800041a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800041c:	2b01      	cmp	r3, #1
 800041e:	d902      	bls.n	8000426 <send+0x3a>
 8000420:	f46f 7300 	mvn.w	r3, #512	; 0x200
 8000424:	e022      	b.n	800046c <send+0x80>

	/*if(!is_valid_addr(addr)) return CAN_E_UNKNOW_ADDR;
	if(!is_valid_code_fct(fct_code)) return CAN_E_UNKNOW_CODE_FCT;*/

	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = data_len;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.ExtId = addr | CAN_ADDR_BASE_ROULANTE_E | fct_code | rep_len | msg_id << CAN_DECALAGE_ID_MSG | is_rep << CAN_DECALAGE_IS_REP | rep_len;
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	431a      	orrs	r2, r3
 8000430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000432:	431a      	orrs	r2, r3
 8000434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000436:	011b      	lsls	r3, r3, #4
 8000438:	4313      	orrs	r3, r2
 800043a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800043e:	00d2      	lsls	r2, r2, #3
 8000440:	431a      	orrs	r2, r3
 8000442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000444:	4313      	orrs	r3, r2
 8000446:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800044a:	61fb      	str	r3, [r7, #28]
	txHeader.IDE = CAN_ID_EXT;
 800044c:	2304      	movs	r3, #4
 800044e:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 8000450:	2300      	movs	r3, #0
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.TransmitGlobalTime = DISABLE;
 8000454:	2300      	movs	r3, #0
 8000456:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint32_t TxMailbox;
	HAL_CAN_AddTxMessage(&hcan_p, &txHeader, data, &TxMailbox);
 800045a:	f107 0314 	add.w	r3, r7, #20
 800045e:	f107 0118 	add.w	r1, r7, #24
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	4805      	ldr	r0, [pc, #20]	; (800047c <send+0x90>)
 8000466:	f000 fd0c 	bl	8000e82 <HAL_CAN_AddTxMessage>

	return 0;
 800046a:	2300      	movs	r3, #0
}
 800046c:	4618      	mov	r0, r3
 800046e:	3730      	adds	r7, #48	; 0x30
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	fffffe02 	.word	0xfffffe02
 8000478:	fffffe00 	.word	0xfffffe00
 800047c:	200000b4 	.word	0x200000b4

08000480 <process_frame>:


can_mess_t process_frame(CAN_RxHeaderTypeDef frame, uint8_t data[]){
 8000480:	b084      	sub	sp, #16
 8000482:	b5b0      	push	{r4, r5, r7, lr}
 8000484:	b08a      	sub	sp, #40	; 0x28
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800048e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	can_mess_t rep;

	rep.recv_addr = (frame.ExtId & CAN_FILTER_ADDR_EMETTEUR);
 8000492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000494:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000498:	60fb      	str	r3, [r7, #12]
	rep.emit_addr = (frame.ExtId &  CAN_FILTER_ADDR_RECEPTEUR);
 800049a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800049c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80004a0:	613b      	str	r3, [r7, #16]
	rep.fct_code = (frame.ExtId & CAN_FILTER_CODE_FCT);
 80004a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004a4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80004a8:	617b      	str	r3, [r7, #20]
	rep.is_rep = (frame.ExtId & CAN_FILTER_IS_REP) >> CAN_DECALAGE_IS_REP;
 80004aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004ac:	08db      	lsrs	r3, r3, #3
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	bf14      	ite	ne
 80004b6:	2301      	movne	r3, #1
 80004b8:	2300      	moveq	r3, #0
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	767b      	strb	r3, [r7, #25]
	rep.rep_id = (frame.ExtId & CAN_FILTER_REP_NBR) ;
 80004be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	f003 0307 	and.w	r3, r3, #7
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	76bb      	strb	r3, [r7, #26]
	rep.message_id = (frame.ExtId & CAN_FILTER_IDE_MSG) >> CAN_DECALAGE_ID_MSG;
 80004ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004cc:	091b      	lsrs	r3, r3, #4
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	763b      	strb	r3, [r7, #24]

	if(rep.recv_addr < 0 || rep.recv_addr > CAN_MAX_VALUE_ADDR) exit(CAN_E_OOB_ADDR);
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	2b10      	cmp	r3, #16
 80004d6:	d903      	bls.n	80004e0 <process_frame+0x60>
 80004d8:	f46f 70ff 	mvn.w	r0, #510	; 0x1fe
 80004dc:	f002 f9ee 	bl	80028bc <exit>
	if(rep.fct_code < 0 || rep.fct_code > CAN_MAX_VALUE_CODE_FCT) exit(CAN_E_OOB_CODE_FCT);
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	2b80      	cmp	r3, #128	; 0x80
 80004e4:	d902      	bls.n	80004ec <process_frame+0x6c>
 80004e6:	482f      	ldr	r0, [pc, #188]	; (80005a4 <process_frame+0x124>)
 80004e8:	f002 f9e8 	bl	80028bc <exit>
	if(rep.rep_id < 0 || rep.rep_id > CAN_MAX_VALUE_REP_NBR) exit(CAN_E_OOB_REP_NBR);
 80004ec:	7ebb      	ldrb	r3, [r7, #26]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d903      	bls.n	80004fa <process_frame+0x7a>
 80004f2:	f46f 7000 	mvn.w	r0, #512	; 0x200
 80004f6:	f002 f9e1 	bl	80028bc <exit>
	if(!is_valid_addr(rep.recv_addr)) exit(CAN_E_UNKNOW_ADDR);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fe65 	bl	80001cc <is_valid_addr>
 8000502:	4603      	mov	r3, r0
 8000504:	f083 0301 	eor.w	r3, r3, #1
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d002      	beq.n	8000514 <process_frame+0x94>
 800050e:	4826      	ldr	r0, [pc, #152]	; (80005a8 <process_frame+0x128>)
 8000510:	f002 f9d4 	bl	80028bc <exit>
	if(!is_valid_addr(rep.emit_addr)) exit(CAN_E_UNKNOW_ADDR);
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe58 	bl	80001cc <is_valid_addr>
 800051c:	4603      	mov	r3, r0
 800051e:	f083 0301 	eor.w	r3, r3, #1
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b00      	cmp	r3, #0
 8000526:	d002      	beq.n	800052e <process_frame+0xae>
 8000528:	481f      	ldr	r0, [pc, #124]	; (80005a8 <process_frame+0x128>)
 800052a:	f002 f9c7 	bl	80028bc <exit>
	if(!is_valid_fct_code(rep.fct_code)) exit(CAN_E_UNKNOW_CODE_FCT);
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fe81 	bl	8000238 <is_valid_fct_code>
 8000536:	4603      	mov	r3, r0
 8000538:	f083 0301 	eor.w	r3, r3, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <process_frame+0xc8>
 8000542:	481a      	ldr	r0, [pc, #104]	; (80005ac <process_frame+0x12c>)
 8000544:	f002 f9ba 	bl	80028bc <exit>
	if (frame.DLC > 8) exit(CAN_E_DATA_SIZE_TOO_LONG);
 8000548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800054a:	2b08      	cmp	r3, #8
 800054c:	d902      	bls.n	8000554 <process_frame+0xd4>
 800054e:	4818      	ldr	r0, [pc, #96]	; (80005b0 <process_frame+0x130>)
 8000550:	f002 f9b4 	bl	80028bc <exit>

	rep.data_len = frame.DLC;
 8000554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000556:	b2db      	uxtb	r3, r3
 8000558:	76fb      	strb	r3, [r7, #27]

	for (int i = 0; i < frame.DLC; i++){
 800055a:	2300      	movs	r3, #0
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
 800055e:	e00c      	b.n	800057a <process_frame+0xfa>
		/*if(data[i] <0 || data[i] > 255)
			return CAN_E_OOB_DATA;*/

		rep.data[i] = data[i];
 8000560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000562:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000564:	4413      	add	r3, r2
 8000566:	7819      	ldrb	r1, [r3, #0]
 8000568:	f107 021c 	add.w	r2, r7, #28
 800056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056e:	4413      	add	r3, r2
 8000570:	460a      	mov	r2, r1
 8000572:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < frame.DLC; i++){
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	3301      	adds	r3, #1
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
 800057a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057e:	429a      	cmp	r2, r3
 8000580:	d8ee      	bhi.n	8000560 <process_frame+0xe0>
	}

    return rep;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	461d      	mov	r5, r3
 8000586:	f107 040c 	add.w	r4, r7, #12
 800058a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800058c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800058e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000592:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	3728      	adds	r7, #40	; 0x28
 800059a:	46bd      	mov	sp, r7
 800059c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80005a0:	b004      	add	sp, #16
 80005a2:	4770      	bx	lr
 80005a4:	fffffe00 	.word	0xfffffe00
 80005a8:	fffffdd9 	.word	0xfffffdd9
 80005ac:	fffffdd8 	.word	0xfffffdd8
 80005b0:	fffffe02 	.word	0xfffffe02

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	b089      	sub	sp, #36	; 0x24
 80005b8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 f9e4 	bl	8000986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f819 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f893 	bl	80006ec <MX_GPIO_Init>
  MX_CAN1_Init();
 80005c6:	f000 f85b 	bl	8000680 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  configure_CAN(hcan1, CAN_ADDR_BASE_ROULANTE);
 80005ca:	4e09      	ldr	r6, [pc, #36]	; (80005f0 <main+0x3c>)
 80005cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005d0:	9306      	str	r3, [sp, #24]
 80005d2:	466d      	mov	r5, sp
 80005d4:	f106 0410 	add.w	r4, r6, #16
 80005d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80005e4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005e8:	f7ff feb6 	bl	8000358 <configure_CAN>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005ec:	e7fe      	b.n	80005ec <main+0x38>
 80005ee:	bf00      	nop
 80005f0:	2000008c 	.word	0x2000008c

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b096      	sub	sp, #88	; 0x58
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2244      	movs	r2, #68	; 0x44
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f9a0 	bl	8002948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	463b      	mov	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000616:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061a:	f001 faf3 	bl	8001c04 <HAL_PWREx_ControlVoltageScaling>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000624:	f000 f87a 	bl	800071c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000628:	2310      	movs	r3, #16
 800062a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000634:	2360      	movs	r3, #96	; 0x60
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fb35 	bl	8001cb0 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800064c:	f000 f866 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f001 ff35 	bl	80024d8 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000674:	f000 f852 	bl	800071c <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3758      	adds	r7, #88	; 0x58
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_CAN1_Init+0x64>)
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <MX_CAN1_Init+0x68>)
 8000688:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_CAN1_Init+0x64>)
 800068c:	2210      	movs	r2, #16
 800068e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_CAN1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_CAN1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_CAN1_Init+0x64>)
 800069e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80006a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006d2:	f000 f9cd 	bl	8000a70 <HAL_CAN_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006dc:	f000 f81e 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	40006400 	.word	0x40006400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_GPIO_Init+0x2c>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <MX_GPIO_Init+0x2c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_GPIO_Init+0x2c>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x44>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_MspInit+0x44>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6613      	str	r3, [r2, #96]	; 0x60
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x44>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x44>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x44>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6593      	str	r3, [r2, #88]	; 0x58
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x44>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a28      	ldr	r2, [pc, #160]	; (8000830 <HAL_CAN_MspInit+0xc0>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d149      	bne.n	8000826 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <HAL_CAN_MspInit+0xc4>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000796:	4a27      	ldr	r2, [pc, #156]	; (8000834 <HAL_CAN_MspInit+0xc4>)
 8000798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800079c:	6593      	str	r3, [r2, #88]	; 0x58
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <HAL_CAN_MspInit+0xc4>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <HAL_CAN_MspInit+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <HAL_CAN_MspInit+0xc4>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <HAL_CAN_MspInit+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007d4:	2309      	movs	r3, #9
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f001 f897 	bl	8001914 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2013      	movs	r0, #19
 80007ec:	f001 f85b 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80007f0:	2013      	movs	r0, #19
 80007f2:	f001 f874 	bl	80018de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2014      	movs	r0, #20
 80007fc:	f001 f853 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000800:	2014      	movs	r0, #20
 8000802:	f001 f86c 	bl	80018de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2015      	movs	r0, #21
 800080c:	f001 f84b 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000810:	2015      	movs	r0, #21
 8000812:	f001 f864 	bl	80018de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2016      	movs	r0, #22
 800081c:	f001 f843 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000820:	2016      	movs	r0, #22
 8000822:	f001 f85c 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	; 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40006400 	.word	0x40006400
 8000834:	40021000 	.word	0x40021000

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 f8d4 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <CAN1_TX_IRQHandler+0x10>)
 8000892:	f000 fcfe 	bl	8001292 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000008c 	.word	0x2000008c

080008a0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <CAN1_RX0_IRQHandler+0x10>)
 80008a6:	f000 fcf4 	bl	8001292 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000008c 	.word	0x2000008c

080008b4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <CAN1_RX1_IRQHandler+0x10>)
 80008ba:	f000 fcea 	bl	8001292 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000008c 	.word	0x2000008c

080008c8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <CAN1_SCE_IRQHandler+0x10>)
 80008ce:	f000 fce0 	bl	8001292 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000008c 	.word	0x2000008c

080008dc <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008e6:	f001 ffe3 	bl	80028b0 <__errno>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2216      	movs	r2, #22
 80008ee:	601a      	str	r2, [r3, #0]
	return -1;
 80008f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <_exit>:

void _exit (int status)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ffe7 	bl	80008dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800090e:	e7fe      	b.n	800090e <_exit+0x12>

08000910 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800096c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000938:	f7ff ffea 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <LoopForever+0x6>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	; (8000974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <LoopForever+0xe>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	; (8000980 <LoopForever+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000962:	f001 ffbf 	bl	80028e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000966:	f7ff fe25 	bl	80005b4 <main>

0800096a <LoopForever>:

LoopForever:
    b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800096c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000978:	080029e4 	.word	0x080029e4
  ldr r2, =_sbss
 800097c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000980:	200000ec 	.word	0x200000ec

08000984 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_IRQHandler>

08000986 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 ff7d 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000996:	200f      	movs	r0, #15
 8000998:	f000 f80e 	bl	80009b8 <HAL_InitTick>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	e001      	b.n	80009ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009a8:	f7ff febe 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ac:	79fb      	ldrb	r3, [r7, #7]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_InitTick+0x6c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d023      	beq.n	8000a14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_InitTick+0x70>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_InitTick+0x6c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 ff89 	bl	80018fa <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10f      	bne.n	8000a0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d809      	bhi.n	8000a08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009fc:	f000 ff53 	bl	80018a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_InitTick+0x74>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e007      	b.n	8000a18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	e004      	b.n	8000a18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e001      	b.n	8000a18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000004 	.word	0x20000004

08000a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x20>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_IncTick+0x24>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008
 8000a54:	200000e8 	.word	0x200000e8

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000e8 	.word	0x200000e8

08000a70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e0ed      	b.n	8000c5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d102      	bne.n	8000a94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff fe6e 	bl	8000770 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f042 0201 	orr.w	r2, r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aa4:	f7ff ffd8 	bl	8000a58 <HAL_GetTick>
 8000aa8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aaa:	e012      	b.n	8000ad2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aac:	f7ff ffd4 	bl	8000a58 <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	2b0a      	cmp	r3, #10
 8000ab8:	d90b      	bls.n	8000ad2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2205      	movs	r2, #5
 8000aca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e0c5      	b.n	8000c5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0e5      	beq.n	8000aac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f022 0202 	bic.w	r2, r2, #2
 8000aee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000af0:	f7ff ffb2 	bl	8000a58 <HAL_GetTick>
 8000af4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000af6:	e012      	b.n	8000b1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000af8:	f7ff ffae 	bl	8000a58 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	2b0a      	cmp	r3, #10
 8000b04:	d90b      	bls.n	8000b1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2205      	movs	r2, #5
 8000b16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e09f      	b.n	8000c5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1e5      	bne.n	8000af8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7e1b      	ldrb	r3, [r3, #24]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d108      	bne.n	8000b46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	e007      	b.n	8000b56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7e5b      	ldrb	r3, [r3, #25]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d108      	bne.n	8000b70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	e007      	b.n	8000b80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7e9b      	ldrb	r3, [r3, #26]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d108      	bne.n	8000b9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0220 	orr.w	r2, r2, #32
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	e007      	b.n	8000baa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f022 0220 	bic.w	r2, r2, #32
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7edb      	ldrb	r3, [r3, #27]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d108      	bne.n	8000bc4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 0210 	bic.w	r2, r2, #16
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e007      	b.n	8000bd4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f042 0210 	orr.w	r2, r2, #16
 8000bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7f1b      	ldrb	r3, [r3, #28]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d108      	bne.n	8000bee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 0208 	orr.w	r2, r2, #8
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e007      	b.n	8000bfe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 0208 	bic.w	r2, r2, #8
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7f5b      	ldrb	r3, [r3, #29]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d108      	bne.n	8000c18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f042 0204 	orr.w	r2, r2, #4
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e007      	b.n	8000c28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 0204 	bic.w	r2, r2, #4
 8000c26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	431a      	orrs	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	431a      	orrs	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	ea42 0103 	orr.w	r1, r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	1e5a      	subs	r2, r3, #1
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b087      	sub	sp, #28
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c7e:	7cfb      	ldrb	r3, [r7, #19]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d003      	beq.n	8000c8c <HAL_CAN_ConfigFilter+0x26>
 8000c84:	7cfb      	ldrb	r3, [r7, #19]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	f040 80aa 	bne.w	8000de0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c92:	f043 0201 	orr.w	r2, r3, #1
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	f003 031f 	and.w	r3, r3, #31
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d123      	bne.n	8000d0e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ce8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3248      	adds	r2, #72	; 0x48
 8000cee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d04:	6979      	ldr	r1, [r7, #20]
 8000d06:	3348      	adds	r3, #72	; 0x48
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	440b      	add	r3, r1
 8000d0c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d122      	bne.n	8000d5c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3248      	adds	r2, #72	; 0x48
 8000d3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d52:	6979      	ldr	r1, [r7, #20]
 8000d54:	3348      	adds	r3, #72	; 0x48
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d109      	bne.n	8000d78 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d76:	e007      	b.n	8000d88 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	431a      	orrs	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d109      	bne.n	8000da4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000da2:	e007      	b.n	8000db4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	431a      	orrs	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d107      	bne.n	8000dcc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dd2:	f023 0201 	bic.w	r2, r3, #1
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e006      	b.n	8000dee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
  }
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d12e      	bne.n	8000e6c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2202      	movs	r2, #2
 8000e12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0201 	bic.w	r2, r2, #1
 8000e24:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e26:	f7ff fe17 	bl	8000a58 <HAL_GetTick>
 8000e2a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e2c:	e012      	b.n	8000e54 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e2e:	f7ff fe13 	bl	8000a58 <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	d90b      	bls.n	8000e54 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e012      	b.n	8000e7a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1e5      	bne.n	8000e2e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e006      	b.n	8000e7a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
  }
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b089      	sub	sp, #36	; 0x24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e96:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ea0:	7ffb      	ldrb	r3, [r7, #31]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d003      	beq.n	8000eae <HAL_CAN_AddTxMessage+0x2c>
 8000ea6:	7ffb      	ldrb	r3, [r7, #31]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	f040 80ad 	bne.w	8001008 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10a      	bne.n	8000ece <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d105      	bne.n	8000ece <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 8095 	beq.w	8000ff8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	0e1b      	lsrs	r3, r3, #24
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	409a      	lsls	r2, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10d      	bne.n	8000f06 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ef4:	68f9      	ldr	r1, [r7, #12]
 8000ef6:	6809      	ldr	r1, [r1, #0]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3318      	adds	r3, #24
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	440b      	add	r3, r1
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e00f      	b.n	8000f26 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f10:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f16:	68f9      	ldr	r1, [r7, #12]
 8000f18:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f1a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3318      	adds	r3, #24
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	440b      	add	r3, r1
 8000f24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6819      	ldr	r1, [r3, #0]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	691a      	ldr	r2, [r3, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3318      	adds	r3, #24
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	440b      	add	r3, r1
 8000f36:	3304      	adds	r3, #4
 8000f38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	7d1b      	ldrb	r3, [r3, #20]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d111      	bne.n	8000f66 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3318      	adds	r3, #24
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3304      	adds	r3, #4
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	6811      	ldr	r1, [r2, #0]
 8000f56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3318      	adds	r3, #24
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	440b      	add	r3, r1
 8000f62:	3304      	adds	r3, #4
 8000f64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3307      	adds	r3, #7
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	061a      	lsls	r2, r3, #24
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3306      	adds	r3, #6
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	041b      	lsls	r3, r3, #16
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3305      	adds	r3, #5
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	4313      	orrs	r3, r2
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	3204      	adds	r2, #4
 8000f86:	7812      	ldrb	r2, [r2, #0]
 8000f88:	4610      	mov	r0, r2
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	6811      	ldr	r1, [r2, #0]
 8000f8e:	ea43 0200 	orr.w	r2, r3, r0
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	440b      	add	r3, r1
 8000f98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000f9c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3303      	adds	r3, #3
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	061a      	lsls	r2, r3, #24
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3302      	adds	r3, #2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	041b      	lsls	r3, r3, #16
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	7812      	ldrb	r2, [r2, #0]
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	6811      	ldr	r1, [r2, #0]
 8000fc4:	ea43 0200 	orr.w	r2, r3, r0
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	440b      	add	r3, r1
 8000fce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000fd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3318      	adds	r3, #24
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	4413      	add	r3, r2
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	6811      	ldr	r1, [r2, #0]
 8000fe6:	f043 0201 	orr.w	r2, r3, #1
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3318      	adds	r3, #24
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	440b      	add	r3, r1
 8000ff2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e00e      	b.n	8001016 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e006      	b.n	8001016 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
  }
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001022:	b480      	push	{r7}
 8001024:	b087      	sub	sp, #28
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001036:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d003      	beq.n	8001046 <HAL_CAN_GetRxMessage+0x24>
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	2b02      	cmp	r3, #2
 8001042:	f040 80f3 	bne.w	800122c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10e      	bne.n	800106a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d116      	bne.n	8001088 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e0e7      	b.n	800123a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d107      	bne.n	8001088 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e0d8      	b.n	800123a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	331b      	adds	r3, #27
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	4413      	add	r3, r2
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0204 	and.w	r2, r3, #4
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10c      	bne.n	80010c0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	331b      	adds	r3, #27
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	4413      	add	r3, r2
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0d5b      	lsrs	r3, r3, #21
 80010b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e00b      	b.n	80010d8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	331b      	adds	r3, #27
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	4413      	add	r3, r2
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	08db      	lsrs	r3, r3, #3
 80010d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	331b      	adds	r3, #27
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	4413      	add	r3, r2
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0202 	and.w	r2, r3, #2
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	331b      	adds	r3, #27
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	4413      	add	r3, r2
 80010fa:	3304      	adds	r3, #4
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 020f 	and.w	r2, r3, #15
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	331b      	adds	r3, #27
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	4413      	add	r3, r2
 8001112:	3304      	adds	r3, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	b2da      	uxtb	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	331b      	adds	r3, #27
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	4413      	add	r3, r2
 800112a:	3304      	adds	r3, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0c1b      	lsrs	r3, r3, #16
 8001130:	b29a      	uxth	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	4413      	add	r3, r2
 8001140:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4413      	add	r3, r2
 8001156:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	0a1a      	lsrs	r2, r3, #8
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4413      	add	r3, r2
 8001170:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	0c1a      	lsrs	r2, r3, #16
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3302      	adds	r3, #2
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4413      	add	r3, r2
 800118a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0e1a      	lsrs	r2, r3, #24
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	3303      	adds	r3, #3
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3304      	adds	r3, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0a1a      	lsrs	r2, r3, #8
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	3305      	adds	r3, #5
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4413      	add	r3, r2
 80011d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	0c1a      	lsrs	r2, r3, #16
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3306      	adds	r3, #6
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	4413      	add	r3, r2
 80011f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0e1a      	lsrs	r2, r3, #24
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	3307      	adds	r3, #7
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d108      	bne.n	8001218 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0220 	orr.w	r2, r2, #32
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	e007      	b.n	8001228 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0220 	orr.w	r2, r2, #32
 8001226:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	e006      	b.n	800123a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
  }
}
 800123a:	4618      	mov	r0, r3
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001246:	b480      	push	{r7}
 8001248:	b085      	sub	sp, #20
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d002      	beq.n	8001264 <HAL_CAN_ActivateNotification+0x1e>
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d109      	bne.n	8001278 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6959      	ldr	r1, [r3, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	e006      	b.n	8001286 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
  }
}
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b08a      	sub	sp, #40	; 0x28
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d07c      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d023      	beq.n	800132a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2201      	movs	r2, #1
 80012e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f983 	bl	8001600 <HAL_CAN_TxMailbox0CompleteCallback>
 80012fa:	e016      	b.n	800132a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	2b00      	cmp	r3, #0
 8001304:	d004      	beq.n	8001310 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
 800130e:	e00c      	b.n	800132a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
 8001322:	e002      	b.n	800132a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f989 	bl	800163c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001330:	2b00      	cmp	r3, #0
 8001332:	d024      	beq.n	800137e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800133c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f963 	bl	8001614 <HAL_CAN_TxMailbox1CompleteCallback>
 800134e:	e016      	b.n	800137e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
 8001362:	e00c      	b.n	800137e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800136a:	2b00      	cmp	r3, #0
 800136c:	d004      	beq.n	8001378 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
 8001376:	e002      	b.n	800137e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f969 	bl	8001650 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d024      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001390:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f943 	bl	8001628 <HAL_CAN_TxMailbox2CompleteCallback>
 80013a2:	e016      	b.n	80013d2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	e00c      	b.n	80013d2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d004      	beq.n	80013cc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	e002      	b.n	80013d2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f949 	bl	8001664 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00c      	beq.n	80013f6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2210      	movs	r2, #16
 80013f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00b      	beq.n	8001418 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2208      	movs	r2, #8
 8001410:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f930 	bl	8001678 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d009      	beq.n	8001436 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7fe ff31 	bl	8000298 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00c      	beq.n	800145a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001450:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2210      	movs	r2, #16
 8001458:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	f003 0320 	and.w	r3, r3, #32
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00b      	beq.n	800147c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2208      	movs	r2, #8
 8001474:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f912 	bl	80016a0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f8f9 	bl	800168c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00b      	beq.n	80014bc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2210      	movs	r2, #16
 80014b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f8fc 	bl	80016b4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2208      	movs	r2, #8
 80014d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f8f5 	bl	80016c8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d07b      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d072      	beq.n	80015d8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800150e:	6a3b      	ldr	r3, [r7, #32]
 8001510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800154c:	2b00      	cmp	r3, #0
 800154e:	d043      	beq.n	80015d8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001556:	2b00      	cmp	r3, #0
 8001558:	d03e      	beq.n	80015d8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001560:	2b60      	cmp	r3, #96	; 0x60
 8001562:	d02b      	beq.n	80015bc <HAL_CAN_IRQHandler+0x32a>
 8001564:	2b60      	cmp	r3, #96	; 0x60
 8001566:	d82e      	bhi.n	80015c6 <HAL_CAN_IRQHandler+0x334>
 8001568:	2b50      	cmp	r3, #80	; 0x50
 800156a:	d022      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x320>
 800156c:	2b50      	cmp	r3, #80	; 0x50
 800156e:	d82a      	bhi.n	80015c6 <HAL_CAN_IRQHandler+0x334>
 8001570:	2b40      	cmp	r3, #64	; 0x40
 8001572:	d019      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x316>
 8001574:	2b40      	cmp	r3, #64	; 0x40
 8001576:	d826      	bhi.n	80015c6 <HAL_CAN_IRQHandler+0x334>
 8001578:	2b30      	cmp	r3, #48	; 0x30
 800157a:	d010      	beq.n	800159e <HAL_CAN_IRQHandler+0x30c>
 800157c:	2b30      	cmp	r3, #48	; 0x30
 800157e:	d822      	bhi.n	80015c6 <HAL_CAN_IRQHandler+0x334>
 8001580:	2b10      	cmp	r3, #16
 8001582:	d002      	beq.n	800158a <HAL_CAN_IRQHandler+0x2f8>
 8001584:	2b20      	cmp	r3, #32
 8001586:	d005      	beq.n	8001594 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001588:	e01d      	b.n	80015c6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001592:	e019      	b.n	80015c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	f043 0310 	orr.w	r3, r3, #16
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800159c:	e014      	b.n	80015c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	f043 0320 	orr.w	r3, r3, #32
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015a6:	e00f      	b.n	80015c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015b0:	e00a      	b.n	80015c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ba:	e005      	b.n	80015c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015c4:	e000      	b.n	80015c8 <HAL_CAN_IRQHandler+0x336>
            break;
 80015c6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699a      	ldr	r2, [r3, #24]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2204      	movs	r2, #4
 80015de:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d008      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f872 	bl	80016dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	; 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4907      	ldr	r1, [pc, #28]	; (800178c <__NVIC_EnableIRQ+0x38>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff29 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff3e 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff8e 	bl	80017e4 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5d 	bl	8001790 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff31 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa2 	bl	800184c <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	e148      	b.n	8001bb6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 813a 	beq.w	8001bb0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d005      	beq.n	8001954 <HAL_GPIO_Init+0x40>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d130      	bne.n	80019b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800198a:	2201      	movs	r2, #1
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 0201 	and.w	r2, r3, #1
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d017      	beq.n	80019f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d123      	bne.n	8001a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	08da      	lsrs	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3208      	adds	r2, #8
 8001a40:	6939      	ldr	r1, [r7, #16]
 8001a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0203 	and.w	r2, r3, #3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8094 	beq.w	8001bb0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a88:	4b52      	ldr	r3, [pc, #328]	; (8001bd4 <HAL_GPIO_Init+0x2c0>)
 8001a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8c:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_GPIO_Init+0x2c0>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6613      	str	r3, [r2, #96]	; 0x60
 8001a94:	4b4f      	ldr	r3, [pc, #316]	; (8001bd4 <HAL_GPIO_Init+0x2c0>)
 8001a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aa0:	4a4d      	ldr	r2, [pc, #308]	; (8001bd8 <HAL_GPIO_Init+0x2c4>)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aca:	d00d      	beq.n	8001ae8 <HAL_GPIO_Init+0x1d4>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a43      	ldr	r2, [pc, #268]	; (8001bdc <HAL_GPIO_Init+0x2c8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d007      	beq.n	8001ae4 <HAL_GPIO_Init+0x1d0>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a42      	ldr	r2, [pc, #264]	; (8001be0 <HAL_GPIO_Init+0x2cc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d101      	bne.n	8001ae0 <HAL_GPIO_Init+0x1cc>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e004      	b.n	8001aea <HAL_GPIO_Init+0x1d6>
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	e002      	b.n	8001aea <HAL_GPIO_Init+0x1d6>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_GPIO_Init+0x1d6>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	f002 0203 	and.w	r2, r2, #3
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4093      	lsls	r3, r2
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001afa:	4937      	ldr	r1, [pc, #220]	; (8001bd8 <HAL_GPIO_Init+0x2c4>)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b2c:	4a2d      	ldr	r2, [pc, #180]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b32:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b56:	4a23      	ldr	r2, [pc, #140]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b80:	4a18      	ldr	r2, [pc, #96]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f47f aeaf 	bne.w	8001924 <HAL_GPIO_Init+0x10>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40010000 	.word	0x40010000
 8001bdc:	48000400 	.word	0x48000400
 8001be0:	48000800 	.word	0x48000800
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40007000 	.word	0x40007000

08001c04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c12:	d130      	bne.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c20:	d038      	beq.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2232      	movs	r2, #50	; 0x32
 8001c38:	fb02 f303 	mul.w	r3, r2, r3
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0c9b      	lsrs	r3, r3, #18
 8001c44:	3301      	adds	r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c48:	e002      	b.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5c:	d102      	bne.n	8001c64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f2      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c70:	d110      	bne.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e00f      	b.n	8001c96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c82:	d007      	beq.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c8c:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	431bde83 	.word	0x431bde83

08001cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f000 bc02 	b.w	80024c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc4:	4b96      	ldr	r3, [pc, #600]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cce:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80e4 	beq.w	8001eae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <HAL_RCC_OscConfig+0x4c>
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	f040 808b 	bne.w	8001e0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	f040 8087 	bne.w	8001e0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cfc:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_OscConfig+0x64>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e3d9      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1a      	ldr	r2, [r3, #32]
 8001d18:	4b81      	ldr	r3, [pc, #516]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d004      	beq.n	8001d2e <HAL_RCC_OscConfig+0x7e>
 8001d24:	4b7e      	ldr	r3, [pc, #504]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d2c:	e005      	b.n	8001d3a <HAL_RCC_OscConfig+0x8a>
 8001d2e:	4b7c      	ldr	r3, [pc, #496]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d223      	bcs.n	8001d86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 fd54 	bl	80027f0 <RCC_SetFlashLatencyFromMSIRange>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e3ba      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d52:	4b73      	ldr	r3, [pc, #460]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a72      	ldr	r2, [pc, #456]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001d58:	f043 0308 	orr.w	r3, r3, #8
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b70      	ldr	r3, [pc, #448]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	496d      	ldr	r1, [pc, #436]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d70:	4b6b      	ldr	r3, [pc, #428]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	4968      	ldr	r1, [pc, #416]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
 8001d84:	e025      	b.n	8001dd2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d86:	4b66      	ldr	r3, [pc, #408]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a65      	ldr	r2, [pc, #404]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	f043 0308 	orr.w	r3, r3, #8
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b63      	ldr	r3, [pc, #396]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4960      	ldr	r1, [pc, #384]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da4:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	495b      	ldr	r1, [pc, #364]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fd14 	bl	80027f0 <RCC_SetFlashLatencyFromMSIRange>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e37a      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dd2:	f000 fc81 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	4b51      	ldr	r3, [pc, #324]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	4950      	ldr	r1, [pc, #320]	; (8001f24 <HAL_RCC_OscConfig+0x274>)
 8001de4:	5ccb      	ldrb	r3, [r1, r3]
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	4a4e      	ldr	r2, [pc, #312]	; (8001f28 <HAL_RCC_OscConfig+0x278>)
 8001df0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001df2:	4b4e      	ldr	r3, [pc, #312]	; (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fdde 	bl	80009b8 <HAL_InitTick>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d052      	beq.n	8001eac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	e35e      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d032      	beq.n	8001e78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a42      	ldr	r2, [pc, #264]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e1e:	f7fe fe1b 	bl	8000a58 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e26:	f7fe fe17 	bl	8000a58 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e347      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e38:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a35      	ldr	r2, [pc, #212]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	f043 0308 	orr.w	r3, r3, #8
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4930      	ldr	r1, [pc, #192]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e62:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	492b      	ldr	r1, [pc, #172]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
 8001e76:	e01a      	b.n	8001eae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e78:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e84:	f7fe fde8 	bl	8000a58 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fde4 	bl	8000a58 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e314      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1dc>
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d073      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_OscConfig+0x21c>
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d10b      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d063      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d15f      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e2f1      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d106      	bne.n	8001efc <HAL_RCC_OscConfig+0x24c>
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e025      	b.n	8001f48 <HAL_RCC_OscConfig+0x298>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f04:	d114      	bne.n	8001f30 <HAL_RCC_OscConfig+0x280>
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a02      	ldr	r2, [pc, #8]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e013      	b.n	8001f48 <HAL_RCC_OscConfig+0x298>
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08002998 	.word	0x08002998
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004
 8001f30:	4ba0      	ldr	r3, [pc, #640]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a9f      	ldr	r2, [pc, #636]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b9d      	ldr	r3, [pc, #628]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a9c      	ldr	r2, [pc, #624]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7fe fd82 	bl	8000a58 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7fe fd7e 	bl	8000a58 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e2ae      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f6a:	4b92      	ldr	r3, [pc, #584]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x2a8>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe fd6e 	bl	8000a58 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7fe fd6a 	bl	8000a58 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e29a      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f92:	4b88      	ldr	r3, [pc, #544]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x2d0>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d060      	beq.n	8002070 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x310>
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d119      	bne.n	8001fee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d116      	bne.n	8001fee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc0:	4b7c      	ldr	r3, [pc, #496]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x328>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e277      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	4973      	ldr	r1, [pc, #460]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fec:	e040      	b.n	8002070 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d023      	beq.n	800203e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff6:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6e      	ldr	r2, [pc, #440]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7fe fd29 	bl	8000a58 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200a:	f7fe fd25 	bl	8000a58 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e255      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800201c:	4b65      	ldr	r3, [pc, #404]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	4b62      	ldr	r3, [pc, #392]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	061b      	lsls	r3, r3, #24
 8002036:	495f      	ldr	r1, [pc, #380]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
 800203c:	e018      	b.n	8002070 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203e:	4b5d      	ldr	r3, [pc, #372]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a5c      	ldr	r2, [pc, #368]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8002044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7fe fd05 	bl	8000a58 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002052:	f7fe fd01 	bl	8000a58 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e231      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002064:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d03c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01c      	beq.n	80020be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002084:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8002086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208a:	4a4a      	ldr	r2, [pc, #296]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7fe fce0 	bl	8000a58 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209c:	f7fe fcdc 	bl	8000a58 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e20c      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 80020b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0ef      	beq.n	800209c <HAL_RCC_OscConfig+0x3ec>
 80020bc:	e01b      	b.n	80020f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020be:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 80020c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c4:	4a3b      	ldr	r2, [pc, #236]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7fe fcc3 	bl	8000a58 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d6:	f7fe fcbf 	bl	8000a58 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e1ef      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 80020ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1ef      	bne.n	80020d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80a6 	beq.w	8002250 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10d      	bne.n	8002130 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 800211a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211e:	6593      	str	r3, [r2, #88]	; 0x58
 8002120:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212c:	2301      	movs	r3, #1
 800212e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002130:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_RCC_OscConfig+0x508>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d118      	bne.n	800216e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800213c:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_RCC_OscConfig+0x508>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <HAL_RCC_OscConfig+0x508>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002148:	f7fe fc86 	bl	8000a58 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002150:	f7fe fc82 	bl	8000a58 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1b2      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_RCC_OscConfig+0x508>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d108      	bne.n	8002188 <HAL_RCC_OscConfig+0x4d8>
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002186:	e029      	b.n	80021dc <HAL_RCC_OscConfig+0x52c>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b05      	cmp	r3, #5
 800218e:	d115      	bne.n	80021bc <HAL_RCC_OscConfig+0x50c>
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <HAL_RCC_OscConfig+0x504>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021b0:	e014      	b.n	80021dc <HAL_RCC_OscConfig+0x52c>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40007000 	.word	0x40007000
 80021bc:	4b9a      	ldr	r3, [pc, #616]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c2:	4a99      	ldr	r2, [pc, #612]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021cc:	4b96      	ldr	r3, [pc, #600]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	4a95      	ldr	r2, [pc, #596]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d016      	beq.n	8002212 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7fe fc38 	bl	8000a58 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7fe fc34 	bl	8000a58 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e162      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ed      	beq.n	80021ec <HAL_RCC_OscConfig+0x53c>
 8002210:	e015      	b.n	800223e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002212:	f7fe fc21 	bl	8000a58 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7fe fc1d 	bl	8000a58 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e14b      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002230:	4b7d      	ldr	r3, [pc, #500]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1ed      	bne.n	800221a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223e:	7ffb      	ldrb	r3, [r7, #31]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002244:	4b78      	ldr	r3, [pc, #480]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	4a77      	ldr	r2, [pc, #476]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 800224a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d03c      	beq.n	80022d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	2b00      	cmp	r3, #0
 8002262:	d01c      	beq.n	800229e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002264:	4b70      	ldr	r3, [pc, #448]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 8002266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800226a:	4a6f      	ldr	r2, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002274:	f7fe fbf0 	bl	8000a58 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800227c:	f7fe fbec 	bl	8000a58 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e11c      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800228e:	4b66      	ldr	r3, [pc, #408]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 8002290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ef      	beq.n	800227c <HAL_RCC_OscConfig+0x5cc>
 800229c:	e01b      	b.n	80022d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800229e:	4b62      	ldr	r3, [pc, #392]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80022a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022a4:	4a60      	ldr	r2, [pc, #384]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ae:	f7fe fbd3 	bl	8000a58 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022b6:	f7fe fbcf 	bl	8000a58 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e0ff      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022c8:	4b57      	ldr	r3, [pc, #348]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80022ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ef      	bne.n	80022b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80f3 	beq.w	80024c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	f040 80c9 	bne.w	800247c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022ea:	4b4f      	ldr	r3, [pc, #316]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f003 0203 	and.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d12c      	bne.n	8002358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	3b01      	subs	r3, #1
 800230a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d123      	bne.n	8002358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d11b      	bne.n	8002358 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d113      	bne.n	8002358 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233a:	085b      	lsrs	r3, r3, #1
 800233c:	3b01      	subs	r3, #1
 800233e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d109      	bne.n	8002358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	085b      	lsrs	r3, r3, #1
 8002350:	3b01      	subs	r3, #1
 8002352:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d06b      	beq.n	8002430 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d062      	beq.n	8002424 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800235e:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0ac      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800236e:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a2d      	ldr	r2, [pc, #180]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 8002374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002378:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800237a:	f7fe fb6d 	bl	8000a58 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002382:	f7fe fb69 	bl	8000a58 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e099      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <HAL_RCC_OscConfig+0x77c>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023b0:	3a01      	subs	r2, #1
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	4311      	orrs	r1, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023ba:	0212      	lsls	r2, r2, #8
 80023bc:	4311      	orrs	r1, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023c2:	0852      	lsrs	r2, r2, #1
 80023c4:	3a01      	subs	r2, #1
 80023c6:	0552      	lsls	r2, r2, #21
 80023c8:	4311      	orrs	r1, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023ce:	0852      	lsrs	r2, r2, #1
 80023d0:	3a01      	subs	r2, #1
 80023d2:	0652      	lsls	r2, r2, #25
 80023d4:	4311      	orrs	r1, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023da:	06d2      	lsls	r2, r2, #27
 80023dc:	430a      	orrs	r2, r1
 80023de:	4912      	ldr	r1, [pc, #72]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80023ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 80023f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023fc:	f7fe fb2c 	bl	8000a58 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe fb28 	bl	8000a58 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e058      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <HAL_RCC_OscConfig+0x778>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002422:	e050      	b.n	80024c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e04f      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
 8002428:	40021000 	.word	0x40021000
 800242c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002430:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_RCC_OscConfig+0x820>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d144      	bne.n	80024c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800243c:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCC_OscConfig+0x820>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <HAL_RCC_OscConfig+0x820>)
 8002442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002446:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002448:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <HAL_RCC_OscConfig+0x820>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a20      	ldr	r2, [pc, #128]	; (80024d0 <HAL_RCC_OscConfig+0x820>)
 800244e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002452:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002454:	f7fe fb00 	bl	8000a58 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe fafc 	bl	8000a58 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e02c      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <HAL_RCC_OscConfig+0x820>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x7ac>
 800247a:	e024      	b.n	80024c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d01f      	beq.n	80024c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HAL_RCC_OscConfig+0x820>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HAL_RCC_OscConfig+0x820>)
 8002488:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800248c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7fe fae3 	bl	8000a58 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7fe fadf 	bl	8000a58 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e00f      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_OscConfig+0x820>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCC_OscConfig+0x820>)
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	4905      	ldr	r1, [pc, #20]	; (80024d0 <HAL_RCC_OscConfig+0x820>)
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_RCC_OscConfig+0x824>)
 80024bc:	4013      	ands	r3, r2
 80024be:	60cb      	str	r3, [r1, #12]
 80024c0:	e001      	b.n	80024c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000
 80024d4:	feeefffc 	.word	0xfeeefffc

080024d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0e7      	b.n	80026bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b75      	ldr	r3, [pc, #468]	; (80026c4 <HAL_RCC_ClockConfig+0x1ec>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d910      	bls.n	800251c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b72      	ldr	r3, [pc, #456]	; (80026c4 <HAL_RCC_ClockConfig+0x1ec>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 0207 	bic.w	r2, r3, #7
 8002502:	4970      	ldr	r1, [pc, #448]	; (80026c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b6e      	ldr	r3, [pc, #440]	; (80026c4 <HAL_RCC_ClockConfig+0x1ec>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0cf      	b.n	80026bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d010      	beq.n	800254a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b66      	ldr	r3, [pc, #408]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002534:	429a      	cmp	r2, r3
 8002536:	d908      	bls.n	800254a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002538:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4960      	ldr	r1, [pc, #384]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d04c      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d107      	bne.n	800256e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	4b5a      	ldr	r3, [pc, #360]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d121      	bne.n	80025ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0a6      	b.n	80026bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002576:	4b54      	ldr	r3, [pc, #336]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d115      	bne.n	80025ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e09a      	b.n	80026bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800258e:	4b4e      	ldr	r3, [pc, #312]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e08e      	b.n	80026bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800259e:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e086      	b.n	80026bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025ae:	4b46      	ldr	r3, [pc, #280]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f023 0203 	bic.w	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4943      	ldr	r1, [pc, #268]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c0:	f7fe fa4a 	bl	8000a58 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	e00a      	b.n	80025de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c8:	f7fe fa46 	bl	8000a58 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e06e      	b.n	80026bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	4b3a      	ldr	r3, [pc, #232]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 020c 	and.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1eb      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d010      	beq.n	800261e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002608:	429a      	cmp	r2, r3
 800260a:	d208      	bcs.n	800261e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260c:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	492b      	ldr	r1, [pc, #172]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 800261a:	4313      	orrs	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d210      	bcs.n	800264e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_RCC_ClockConfig+0x1ec>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 0207 	bic.w	r2, r3, #7
 8002634:	4923      	ldr	r1, [pc, #140]	; (80026c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263c:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <HAL_RCC_ClockConfig+0x1ec>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e036      	b.n	80026bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4918      	ldr	r1, [pc, #96]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4910      	ldr	r1, [pc, #64]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002688:	4313      	orrs	r3, r2
 800268a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800268c:	f000 f824 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	490b      	ldr	r1, [pc, #44]	; (80026cc <HAL_RCC_ClockConfig+0x1f4>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
 80026a8:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1f8>)
 80026aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1fc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe f981 	bl	80009b8 <HAL_InitTick>
 80026b6:	4603      	mov	r3, r0
 80026b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80026ba:	7afb      	ldrb	r3, [r7, #11]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40022000 	.word	0x40022000
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08002998 	.word	0x08002998
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e6:	4b3e      	ldr	r3, [pc, #248]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f0:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x34>
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d121      	bne.n	800274a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d11e      	bne.n	800274a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800271a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	e005      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002728:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002734:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b04      	cmp	r3, #4
 800274e:	d102      	bne.n	8002756 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	e004      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d101      	bne.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800275c:	4b23      	ldr	r3, [pc, #140]	; (80027ec <HAL_RCC_GetSysClockFreq+0x114>)
 800275e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d134      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d003      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0xa6>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d003      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0xac>
 800277c:	e005      	b.n	800278a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002780:	617b      	str	r3, [r7, #20]
      break;
 8002782:	e005      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002786:	617b      	str	r3, [r7, #20]
      break;
 8002788:	e002      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	617b      	str	r3, [r7, #20]
      break;
 800278e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	3301      	adds	r3, #1
 800279c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	fb03 f202 	mul.w	r2, r3, r2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	0e5b      	lsrs	r3, r3, #25
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	3301      	adds	r3, #1
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027d0:	69bb      	ldr	r3, [r7, #24]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	080029a8 	.word	0x080029a8
 80027e8:	00f42400 	.word	0x00f42400
 80027ec:	007a1200 	.word	0x007a1200

080027f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027fc:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002808:	f7ff f9ee 	bl	8001be8 <HAL_PWREx_GetVoltageRange>
 800280c:	6178      	str	r0, [r7, #20]
 800280e:	e014      	b.n	800283a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281a:	6593      	str	r3, [r2, #88]	; 0x58
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002828:	f7ff f9de 	bl	8001be8 <HAL_PWREx_GetVoltageRange>
 800282c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002840:	d10b      	bne.n	800285a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d919      	bls.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2ba0      	cmp	r3, #160	; 0xa0
 800284c:	d902      	bls.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800284e:	2302      	movs	r3, #2
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	e013      	b.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002854:	2301      	movs	r3, #1
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	e010      	b.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b80      	cmp	r3, #128	; 0x80
 800285e:	d902      	bls.n	8002866 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002860:	2303      	movs	r3, #3
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	e00a      	b.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b80      	cmp	r3, #128	; 0x80
 800286a:	d102      	bne.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800286c:	2302      	movs	r3, #2
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e004      	b.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b70      	cmp	r3, #112	; 0x70
 8002876:	d101      	bne.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002878:	2301      	movs	r3, #1
 800287a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 0207 	bic.w	r2, r3, #7
 8002884:	4909      	ldr	r1, [pc, #36]	; (80028ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	429a      	cmp	r2, r3
 8002898:	d001      	beq.n	800289e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40022000 	.word	0x40022000

080028b0 <__errno>:
 80028b0:	4b01      	ldr	r3, [pc, #4]	; (80028b8 <__errno+0x8>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	2000000c 	.word	0x2000000c

080028bc <exit>:
 80028bc:	b508      	push	{r3, lr}
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <exit+0x20>)
 80028c0:	4604      	mov	r4, r0
 80028c2:	b113      	cbz	r3, 80028ca <exit+0xe>
 80028c4:	2100      	movs	r1, #0
 80028c6:	f3af 8000 	nop.w
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <exit+0x24>)
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80028d0:	b103      	cbz	r3, 80028d4 <exit+0x18>
 80028d2:	4798      	blx	r3
 80028d4:	4620      	mov	r0, r4
 80028d6:	f7fe f811 	bl	80008fc <_exit>
 80028da:	bf00      	nop
 80028dc:	00000000 	.word	0x00000000
 80028e0:	080029d8 	.word	0x080029d8

080028e4 <__libc_init_array>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	4d0d      	ldr	r5, [pc, #52]	; (800291c <__libc_init_array+0x38>)
 80028e8:	4c0d      	ldr	r4, [pc, #52]	; (8002920 <__libc_init_array+0x3c>)
 80028ea:	1b64      	subs	r4, r4, r5
 80028ec:	10a4      	asrs	r4, r4, #2
 80028ee:	2600      	movs	r6, #0
 80028f0:	42a6      	cmp	r6, r4
 80028f2:	d109      	bne.n	8002908 <__libc_init_array+0x24>
 80028f4:	4d0b      	ldr	r5, [pc, #44]	; (8002924 <__libc_init_array+0x40>)
 80028f6:	4c0c      	ldr	r4, [pc, #48]	; (8002928 <__libc_init_array+0x44>)
 80028f8:	f000 f82e 	bl	8002958 <_init>
 80028fc:	1b64      	subs	r4, r4, r5
 80028fe:	10a4      	asrs	r4, r4, #2
 8002900:	2600      	movs	r6, #0
 8002902:	42a6      	cmp	r6, r4
 8002904:	d105      	bne.n	8002912 <__libc_init_array+0x2e>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	f855 3b04 	ldr.w	r3, [r5], #4
 800290c:	4798      	blx	r3
 800290e:	3601      	adds	r6, #1
 8002910:	e7ee      	b.n	80028f0 <__libc_init_array+0xc>
 8002912:	f855 3b04 	ldr.w	r3, [r5], #4
 8002916:	4798      	blx	r3
 8002918:	3601      	adds	r6, #1
 800291a:	e7f2      	b.n	8002902 <__libc_init_array+0x1e>
 800291c:	080029dc 	.word	0x080029dc
 8002920:	080029dc 	.word	0x080029dc
 8002924:	080029dc 	.word	0x080029dc
 8002928:	080029e0 	.word	0x080029e0

0800292c <memcpy>:
 800292c:	440a      	add	r2, r1
 800292e:	4291      	cmp	r1, r2
 8002930:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002934:	d100      	bne.n	8002938 <memcpy+0xc>
 8002936:	4770      	bx	lr
 8002938:	b510      	push	{r4, lr}
 800293a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800293e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002942:	4291      	cmp	r1, r2
 8002944:	d1f9      	bne.n	800293a <memcpy+0xe>
 8002946:	bd10      	pop	{r4, pc}

08002948 <memset>:
 8002948:	4402      	add	r2, r0
 800294a:	4603      	mov	r3, r0
 800294c:	4293      	cmp	r3, r2
 800294e:	d100      	bne.n	8002952 <memset+0xa>
 8002950:	4770      	bx	lr
 8002952:	f803 1b01 	strb.w	r1, [r3], #1
 8002956:	e7f9      	b.n	800294c <memset+0x4>

08002958 <_init>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr

08002964 <_fini>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr
